{"version":3,"sources":["init.js"],"names":["DEFAULT_DEPENDENCIES","expo","react","DEFAULT_DEV_DEPENDENCIES","module","exports","appPath","appName","verbose","cwd","ownPackageName","require","name","ownPath","join","useYarn","npmVersion","sync","stdout","toString","trim","startsWith","console","log","yellow","process","exit","readmeExists","rename","appPackagePath","JSON","readFile","appPackage","parse","main","scripts","start","eject","android","ios","test","jest","preset","dependencies","devDependencies","writeFile","copy","code","data","appendFile","unlink","command","args","push","proc","stdio","on","error","cdpath","resolve","cyan"],"mappings":"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","file":"init.js","sourcesContent":["// @flow\n\nimport chalk from 'chalk';\nimport fse from 'fs-extra';\nimport path from 'path';\nimport pathExists from 'path-exists';\nimport spawn from 'cross-spawn';\nimport log from '../util/log';\n\n// UPDATE DEPENDENCY VERSIONS HERE\nconst DEFAULT_DEPENDENCIES = {\n  expo: '^17.0.0',\n  react: '16.0.0-alpha.6',\n  'react-native': '^0.44.0',\n};\n\n// TODO figure out how this interacts with ejection\nconst DEFAULT_DEV_DEPENDENCIES = {\n  'jest-expo': '~1.0.1',\n  'react-test-renderer': '16.0.0-alpha.6',\n};\n\nmodule.exports = async (appPath: string, appName: string, verbose: boolean, cwd: string = '') => {\n  const ownPackageName: string = require('../../package.json').name;\n  const ownPath: string = path.join(appPath, 'node_modules', ownPackageName);\n  const useYarn: boolean = await pathExists(path.join(appPath, 'yarn.lock'));\n\n  // FIXME(perry) remove when npm 5 is supported\n  if (!useYarn) {\n    let npmVersion = spawn.sync('npm', ['--version']).stdout.toString().trim();\n\n    if (npmVersion.startsWith('5')) {\n      console.log(chalk.yellow(`\n*******************************************************************************\nERROR: npm 5 is not supported yet\n*******************************************************************************\n\nIt looks like you're using npm 5 which was recently released.\n\nCreate React Native App doesn't work with npm 5 yet, unfortunately. We\nrecommend using npm 4 or yarn until some bugs are resolved.\n\nYou can follow the known issues with npm 5 at:\nhttps://github.com/npm/npm/issues/16991\n\n*******************************************************************************\n `));\n      process.exit(1);\n    }\n  }\n\n  const readmeExists: boolean = await pathExists(path.join(appPath, 'README.md'));\n  if (readmeExists) {\n    await fse.rename(path.join(appPath, 'README.md'), path.join(appPath, 'README.old.md'));\n  }\n\n  const appPackagePath: string = path.join(appPath, 'package.json');\n  const appPackage = JSON.parse(await fse.readFile(appPackagePath));\n\n  // mutate the default package.json in any ways we need to\n  appPackage.main = './node_modules/react-native-scripts/build/bin/crna-entry.js';\n  appPackage.scripts = {\n    start: 'react-native-scripts start',\n    eject: 'react-native-scripts eject',\n    android: 'react-native-scripts android',\n    ios: 'react-native-scripts ios',\n    test: 'node node_modules/jest/bin/jest.js --watch',\n  };\n\n  appPackage.jest = {\n    preset: 'jest-expo',\n  };\n\n  if (!appPackage.dependencies) {\n    appPackage.dependencies = {};\n  }\n\n  if (!appPackage.devDependencies) {\n    appPackage.devDependencies = {};\n  }\n\n  // react-native-scripts is already in the package.json devDependencies\n  // so we need to merge instead of assigning\n  Object.assign(appPackage.dependencies, DEFAULT_DEPENDENCIES);\n  Object.assign(appPackage.devDependencies, DEFAULT_DEV_DEPENDENCIES);\n\n  // Write the new appPackage after copying so that we can include any existing\n  await fse.writeFile(appPackagePath, JSON.stringify(appPackage, null, 2));\n\n  // Copy the files for the user\n  await fse.copy(path.join(ownPath, 'template'), appPath);\n\n  // Rename gitignore after the fact to prevent npm from renaming it to .npmignore\n  try {\n    await fse.rename(path.join(appPath, 'gitignore'), path.join(appPath, '.gitignore'));\n  } catch (err) {\n    // Append if there's already a `.gitignore` file there\n    if (err.code === 'EEXIST') {\n      const data = await fse.readFile(path.join(appPath, 'gitignore'));\n      await fse.appendFile(path.join(appPath, '.gitignore'), data);\n      await fse.unlink(path.join(appPath, 'gitignore'));\n    } else {\n      throw err;\n    }\n  }\n\n  // Run yarn or npm\n  let command = '';\n  let args = [];\n\n  if (useYarn) {\n    command = 'yarnpkg';\n  } else {\n    command = 'npm';\n    args = ['install', '--save'];\n\n    if (verbose) {\n      args.push('--verbose');\n    }\n  }\n\n  log(`Installing dependencies using ${command}...`);\n  log(); // why is this here\n\n  if (command === 'yarnpkg') {\n    // it's weird to print a yarn alias that no one uses\n    command = 'yarn';\n  }\n\n  const proc = spawn(command, args, { stdio: 'inherit' });\n  proc.on('close', code => {\n    if (code !== 0) {\n      console.error(`\\`${command} ${args.join(' ')}\\` failed`);\n      return;\n    }\n\n    // display the cleanest way to get to the app dir\n    // if the cwd + appName is equal to the full path, then just cd into appName\n    let cdpath;\n    if (path.resolve(cwd, appName) === appPath) {\n      cdpath = appName;\n    } else {\n      cdpath = appPath;\n    }\n\n    log(\n      `\n\nSuccess! Created ${appName} at ${appPath}\nInside that directory, you can run several commands:\n\n  ${chalk.cyan(command + ' start')}\n    Starts the development server so you can open your app in the Expo\n    app on your phone.\n\n  ${chalk.cyan(command + ' run ios')}\n    (Mac only, requires Xcode)\n    Starts the development server and loads your app in an iOS simulator.\n\n  ${chalk.cyan(command + ' run android')}\n    (Requires Android build tools)\n    Starts the development server and loads your app on a connected Android\n    device or emulator.\n\n  ${chalk.cyan(command + ' test')}\n    Starts the test runner.\n\n  ${chalk.cyan(command + ' run eject')}\n    Removes this tool and copies build dependencies, configuration files\n    and scripts into the app directory. If you do this, you canâ€™t go back!\n\nWe suggest that you begin by typing:\n\n  ${chalk.cyan('cd ' + cdpath)}\n  ${chalk.cyan(command + ' start')}`\n    );\n\n    if (readmeExists) {\n      log(\n        `\n${chalk.yellow('You had a `README.md` file, we renamed it to `README.old.md`')}`\n      );\n    }\n\n    log();\n    log('Happy hacking!');\n  });\n};\n"]}