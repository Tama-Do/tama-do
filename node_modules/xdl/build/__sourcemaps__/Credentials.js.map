{"version":3,"sources":["Credentials.js"],"names":["async","metadata","fetchCredentials","credentialsExistForPlatformAsync","getCredentialsForPlatform","username","experienceName","bundleIdentifier","platform","decrypt","err","credentials","await","Api","callMethodAsync","Error","newCredentials","updateCredentialsForPlatform","removeCredentialsForPlatform","validationType","isValid","error","errorCode","errorMessage","validateCredentialsForPlatform","success","fetchAppleCertificates","ensureAppId","result","fetchPushCertificates"],"mappings":"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","file":"../Credentials.js","sourcesContent":["/**\n * @flow\n */\n\nimport Api from './Api';\nimport XDLError from './XDLError';\n\nexport type AndroidCredentials = {\n  keystore: string,\n  keystoreAlias: string,\n  keystorePassword: string,\n  keyPassword: string,\n};\n\nexport type IOSCredentials = {\n  appleId?: string,\n  password?: string,\n  teamId?: string,\n  certP12?: string,\n  certPassword?: string,\n  pushP12?: string,\n  pushPassword?: string,\n};\n\nexport type Credentials = IOSCredentials & AndroidCredentials;\n\nexport type CredentialMetadata = {\n  username: string,\n  experienceName: string,\n  bundleIdentifier: string,\n  platform: string,\n};\n\nexport async function credentialsExistForPlatformAsync(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, false);\n}\n\nexport async function getCredentialsForPlatform(\n  metadata: CredentialMetadata\n): Promise<?Credentials> {\n  return fetchCredentials(metadata, true);\n}\n\nasync function fetchCredentials(\n  { username, experienceName, bundleIdentifier, platform }: CredentialMetadata,\n  decrypt: boolean\n): Promise<?Credentials> {\n  const {\n    err,\n    credentials,\n  } = await Api.callMethodAsync('getCredentials', [], 'post', {\n    username,\n    experienceName,\n    bundleIdentifier,\n    platform,\n    decrypt,\n  });\n\n  if (err) {\n    throw new Error('Error fetching credentials.');\n  }\n\n  return credentials;\n}\n\nexport async function updateCredentialsForPlatform(\n  platform: string,\n  newCredentials: Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const {\n    err,\n    credentials,\n  } = await Api.callMethodAsync('updateCredentials', [], 'post', {\n    credentials: newCredentials,\n    platform,\n    ...metadata,\n  });\n\n  if (err || !credentials) {\n    throw new Error('Error updating credentials.');\n  }\n\n  return;\n}\n\nexport async function removeCredentialsForPlatform(\n  platform: string,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const { err } = await Api.callMethodAsync('deleteCredentials', [], 'post', {\n    platform,\n    ...metadata,\n  });\n\n  if (err) {\n    throw new Error('Error deleting credentials.');\n  }\n\n  return;\n}\n\nexport async function validateCredentialsForPlatform(\n  platform: string,\n  validationType: string,\n  credentials: ?Credentials,\n  metadata: CredentialMetadata\n): Promise<void> {\n  const {\n    isValid,\n    error,\n    errorCode,\n    errorMessage,\n  } = await Api.callMethodAsync('validateCredentials', [], 'post', {\n    credentials,\n    platform,\n    validationType,\n    ...metadata,\n  });\n\n  if (!isValid || error) {\n    throw new XDLError(\n      errorCode,\n      `Unable to validate credentials: ${errorMessage}`\n    );\n  }\n\n  return;\n}\n\nexport async function fetchAppleCertificates(\n  metadata: CredentialMetadata\n): Promise<void> {\n  const {\n    err,\n    success,\n    error,\n    errorCode,\n    errorMessage,\n  } = await Api.callMethodAsync('fetchAppleCertificates', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success || error) {\n    throw new XDLError(\n      errorCode,\n      `Unable to fetch distribution certificate: ${errorMessage}`\n    );\n  }\n\n  return success;\n}\n\nexport async function ensureAppId(metadata: CredentialMetadata): Promise<void> {\n  const {\n    err,\n    success,\n    errorCode,\n    errorMessage,\n  } = await Api.callMethodAsync('ensureAppId', [], 'post', {\n    ...metadata,\n  });\n\n  if (err || !success) {\n    throw new XDLError(errorCode, `Unable to create app id: ${errorMessage}`);\n  }\n\n  return success;\n}\n\nexport async function fetchPushCertificates(\n  metadata: CredentialMetadata\n): Promise<void> {\n  const result = await Api.callMethodAsync(\n    'fetchPushCertificates',\n    [],\n    'post',\n    {\n      ...metadata,\n    }\n  );\n\n  if (result.err || !result.success) {\n    throw new XDLError(\n      result.errorCode,\n      `Unable to fetch push certificate: ${result.errorMessage}`\n    );\n  }\n\n  return result.success;\n}\n"],"sourceRoot":"/xdl/src"}