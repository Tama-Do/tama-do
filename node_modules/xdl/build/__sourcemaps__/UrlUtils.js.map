{"version":3,"sources":["UrlUtils.js"],"names":["async","projectRoot","opts","requestHostname","constructUrlAsync","constructBundleUrlAsync","constructManifestUrlAsync","entryPoint","ext","let","bundleUrl","await","hostType","urlType","mainModulePath","guessMainModulePath","queryParams","constructBundleQueryParamsAsync","dev","minify","constructUrlWithExtensionAsync","constructPublishUrlAsync","constructSourceMapUrlAsync","constructAssetsUrlAsync","constructDebuggerHostAsync","encodeURIComponent","hasOwnProperty","strict","exp","pkg","ProjectUtils","readConfigJsonAsync","sdkPkg","dependencies","pluginModule","supportsAssetPlugins","Versions","gteSdkVersion","isPackager","urlRandomnessSchema","Config","offline","joi","string","optional","allow","schema","object","keys","any","valid","lanType","boolean","urlRandomness","promise","validate","e","ErrorCode","INVALID_OPTIONS","toString","defaultOpts","ProjectSettings","getPackagerOptsAsync","Object","assign","packagerInfo","readPackagerInfoAsync","protocol","detach","scheme","hostname","port","packagerPort","expoServerPort","process","env","EXPO_PACKAGER_HOSTNAME","REACT_NATIVE_PACKAGER_HOSTNAME","ip","address","os","ngrokUrl","packagerNgrokUrl","expoServerNgrokUrl","pnu","url","parse","url_","Error","randomIdentifier","sevenDigitIdentifier","randomIdentifierForUser","someRandomness","domainify","getPlatformSpecificBundleUrl","replace","length","alphabet","result","i","j","Math","floor","random","c","substr","username","join","s","toLowerCase","platform","includes","Exp","ENTRY_POINT_PLATFORM_TEMPLATE_STRING"],"mappings":"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","file":"../UrlUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport ip from 'ip';\nimport joi from 'joi';\nimport os from 'os';\nimport url from 'url';\n\nimport Config from './Config';\nimport ErrorCode from './ErrorCode';\nimport * as Exp from './Exp';\nimport * as ProjectSettings from './ProjectSettings';\nimport * as ProjectUtils from './project/ProjectUtils';\nimport * as Versions from './Versions';\nimport XDLError from './XDLError';\n\nexport async function constructBundleUrlAsync(\n  projectRoot: string,\n  opts: any,\n  requestHostname?: string\n) {\n  return constructUrlAsync(projectRoot, opts, true, requestHostname);\n}\n\nexport async function constructManifestUrlAsync(\n  projectRoot: string,\n  opts: any,\n  requestHostname?: string\n) {\n  return constructUrlAsync(projectRoot, opts, false, requestHostname);\n}\n\nexport async function constructUrlWithExtensionAsync(\n  projectRoot: string,\n  entryPoint: string,\n  ext: string,\n  requestHostname?: string\n) {\n  let bundleUrl = await constructBundleUrlAsync(\n    projectRoot,\n    {\n      hostType: 'localhost',\n      urlType: 'http',\n    },\n    requestHostname\n  );\n\n  let mainModulePath = guessMainModulePath(entryPoint);\n  bundleUrl += `/${mainModulePath}.${ext}`;\n\n  let queryParams = await constructBundleQueryParamsAsync(\n    projectRoot,\n    {\n      dev: false,\n      minify: true,\n    },\n    requestHostname\n  );\n  return `${bundleUrl}?${queryParams}`;\n}\n\nexport async function constructPublishUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'bundle',\n    requestHostname\n  );\n}\n\nexport async function constructSourceMapUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'map',\n    requestHostname\n  );\n}\n\nexport async function constructAssetsUrlAsync(\n  projectRoot: string,\n  entryPoint: string,\n  requestHostname?: string\n) {\n  return await constructUrlWithExtensionAsync(\n    projectRoot,\n    entryPoint,\n    'assets',\n    requestHostname\n  );\n}\n\nexport async function constructDebuggerHostAsync(\n  projectRoot: string,\n  requestHostname?: string\n) {\n  return constructUrlAsync(\n    projectRoot,\n    {\n      urlType: 'no-protocol',\n    },\n    true,\n    requestHostname\n  );\n}\n\nexport async function constructBundleQueryParamsAsync(\n  projectRoot: string,\n  opts: any\n) {\n  let queryParams = `dev=${encodeURIComponent(!!opts.dev)}`;\n\n  if (opts.hasOwnProperty('strict')) {\n    queryParams += `&strict=${encodeURIComponent(!!opts.strict)}`;\n  }\n\n  if (opts.hasOwnProperty('minify')) {\n    queryParams += `&minify=${encodeURIComponent(!!opts.minify)}`;\n  }\n\n  queryParams += '&hot=false';\n\n  let { exp, pkg } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n\n  // Be backwards compatible for users who haven't migrated from `exponent`\n  // to the `expo` sdk package.\n  let sdkPkg = pkg.dependencies['expo'] ? 'expo' : 'exponent';\n  let pluginModule = `${sdkPkg}/tools/hashAssetFiles`;\n  queryParams += `&assetPlugin=${pluginModule}`;\n\n  // Only sdk-10.1.0+ supports the assetPlugin parameter. We use only the\n  // major version in the sdkVersion field, so check for 11.0.0 to be sure.\n  let supportsAssetPlugins = Versions.gteSdkVersion(exp, '11.0.0');\n  if (!supportsAssetPlugins) {\n    queryParams += '&includeAssetFileHashes=true';\n  }\n\n  return queryParams;\n}\n\nexport async function constructUrlAsync(\n  projectRoot: string,\n  opts: any,\n  isPackager: boolean,\n  requestHostname?: string\n) {\n  if (opts) {\n    // the randomness is only important if we're online and can build a tunnel\n    let urlRandomnessSchema;\n    if (Config.offline) {\n      urlRandomnessSchema = joi.string().optional().allow(null);\n    } else {\n      urlRandomnessSchema = joi.string();\n    }\n\n    let schema = joi.object().keys({\n      urlType: joi.any().valid('exp', 'http', 'redirect', 'no-protocol'),\n      lanType: joi.any().valid('ip', 'hostname'),\n      hostType: joi.any().valid('localhost', 'lan', 'tunnel'),\n      dev: joi.boolean(),\n      strict: joi.boolean(),\n      minify: joi.boolean(),\n      urlRandomness: urlRandomnessSchema,\n    });\n\n    try {\n      await joi.promise.validate(opts, schema);\n    } catch (e) {\n      throw new XDLError(ErrorCode.INVALID_OPTIONS, e.toString());\n    }\n  }\n\n  let defaultOpts = await ProjectSettings.getPackagerOptsAsync(projectRoot);\n  if (!opts) {\n    opts = defaultOpts;\n  } else {\n    opts = Object.assign(defaultOpts, opts);\n  }\n\n  let packagerInfo = await ProjectSettings.readPackagerInfoAsync(projectRoot);\n\n  let protocol;\n  if (opts.urlType === 'http') {\n    protocol = 'http';\n  } else if (opts.urlType === 'no-protocol') {\n    protocol = null;\n  } else {\n    protocol = 'exp';\n\n    let { exp } = await ProjectUtils.readConfigJsonAsync(projectRoot);\n    if (exp.detach && exp.detach.scheme) {\n      protocol = exp.detach.scheme;\n    }\n  }\n\n  let hostname;\n  let port;\n\n  if (opts.hostType === 'localhost') {\n    hostname = 'localhost';\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else if (opts.hostType === 'lan' || Config.offline) {\n    if (process.env.EXPO_PACKAGER_HOSTNAME) {\n      hostname = process.env.EXPO_PACKAGER_HOSTNAME;\n    } else if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n      hostname = process.env.REACT_NATIVE_PACKAGER_HOSTNAME;\n    } else if (opts.lanType === 'ip') {\n      if (requestHostname) {\n        hostname = requestHostname;\n      } else {\n        hostname = ip.address();\n      }\n    } else {\n      // Some old versions of OSX work with hostname but not local ip address.\n      hostname = os.hostname();\n    }\n    port = isPackager ? packagerInfo.packagerPort : packagerInfo.expoServerPort;\n  } else {\n    let ngrokUrl = isPackager\n      ? packagerInfo.packagerNgrokUrl\n      : packagerInfo.expoServerNgrokUrl;\n    if (!ngrokUrl) {\n      // use localhost\n      hostname = 'localhost';\n      port = isPackager\n        ? packagerInfo.packagerPort\n        : packagerInfo.expoServerPort;\n\n      // TODO report a warning when this is for a currently served project, suppress for status checks\n    } else {\n      let pnu = url.parse(ngrokUrl);\n      hostname = pnu.hostname;\n      port = pnu.port;\n    }\n  }\n\n  let url_ = '';\n  if (protocol) {\n    url_ += `${protocol}://`;\n  }\n\n  if (!hostname) {\n    throw new Error('Hostname cannot be inferred.');\n  }\n\n  url_ += hostname;\n\n  if (port) {\n    url_ += `:${port}`;\n  } else {\n    // Android HMR breaks without this :|\n    url_ += ':80';\n  }\n\n  if (opts.urlType === 'redirect') {\n    return `https://exp.host/--/to-exp/${encodeURIComponent(url_)}`;\n  }\n\n  return url_;\n}\n\nexport function guessMainModulePath(entryPoint: string) {\n  return entryPoint.replace(/\\.js$/, '');\n}\n\nexport function randomIdentifier(length: number = 6) {\n  let alphabet = '23456789qwertyuipasdfghjkzxcvbnm';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    let j = Math.floor(Math.random() * alphabet.length);\n    let c = alphabet.substr(j, 1);\n    result += c;\n  }\n  return result;\n}\n\nexport function sevenDigitIdentifier() {\n  return `${randomIdentifier(3)}-${randomIdentifier(4)}`;\n}\n\nexport function randomIdentifierForUser(username: string) {\n  return `${username}-${randomIdentifier(3)}-${randomIdentifier(2)}`;\n}\n\nexport function someRandomness() {\n  return [randomIdentifier(2), randomIdentifier(3)].join('-');\n}\n\nexport function domainify(s: string) {\n  return s\n    .toLowerCase()\n    .replace(/[^a-z0-9-]/g, '-')\n    .replace(/^-+/, '')\n    .replace(/-+$/, '');\n}\n\nexport function getPlatformSpecificBundleUrl(url: string, platform: string) {\n  if (url.includes(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING)) {\n    return url.replace(Exp.ENTRY_POINT_PLATFORM_TEMPLATE_STRING, platform);\n  } else {\n    return url;\n  }\n}\n"],"sourceRoot":"/xdl/src"}