{"version":3,"sources":["ApiV2.js"],"names":["let","ROOT_BASE_URL","Config","api","scheme","host","port","API_BASE_URL","ApiV2Error","constructor","message","code","_isApiError","ApiV2Client","static","clientForUser","user","accessToken","idToken","options","getAsync","async","methodName","args","extraOptions","_requestAsync","httpMethod","queryParameters","postAsync","data","body","putAsync","extraRequestOptions","url","reqOptions","method","headers","qs","json","_","merge","response","result","await","request","promise","e","error","Error","responseBody","logger","errors","length","responseError","serverStack","stack","details"],"mappings":"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","file":"../ApiV2.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport ExtendableError from 'es6-error';\nimport request from 'request';\n\nimport Config from './Config';\n\nimport logger from './Logger';\n\nimport type { User } from './User';\n\nlet ROOT_BASE_URL = `${Config.api.scheme}://${Config.api.host}`;\nif (Config.api.port) {\n  ROOT_BASE_URL += ':' + Config.api.port;\n}\nconst API_BASE_URL = ROOT_BASE_URL + '/--/api/v2';\n\nexport class ApiV2Error extends ExtendableError {\n  code: string;\n  details: Object;\n  serverStack: ?string;\n\n  constructor(message: string, code: string = 'UNKNOWN') {\n    super(message);\n    this.code = code;\n    this._isApiError = true;\n  }\n}\n\ntype RequestOptions = {\n  httpMethod: 'get' | 'post' | 'put',\n  queryParameters?: ?QueryParameters,\n  body?: ?Object,\n};\n\ntype QueryParameters = { [key: string]: ?(string | number | boolean) };\n\ntype ErrorWithResponseBody = Error & {\n  responseBody?: any,\n};\n\ntype APIV2ClientOptions = {\n  idToken?: string,\n  accessToken?: string,\n};\n\nexport default class ApiV2Client {\n  idToken: ?string = null;\n  accessToken: ?string = null;\n\n  static clientForUser(user: ?User): ApiV2Client {\n    if (user) {\n      return new ApiV2Client({\n        accessToken: user.accessToken,\n        idToken: user.idToken,\n      });\n    }\n\n    return new ApiV2Client();\n  }\n\n  constructor(options: APIV2ClientOptions = {}) {\n    if (options.idToken) {\n      this.idToken = options.idToken;\n    }\n\n    if (options.accessToken) {\n      this.accessToken = options.accessToken;\n    }\n  }\n\n  async getAsync(\n    methodName: string,\n    args: QueryParameters = {},\n    extraOptions: Object = {}\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'get',\n        queryParameters: args,\n      },\n      extraOptions\n    );\n  }\n\n  async postAsync(\n    methodName: string,\n    data: Object = {},\n    extraOptions: Object = {}\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'post',\n        body: data,\n      },\n      extraOptions\n    );\n  }\n\n  async putAsync(\n    methodName: string,\n    data: Object = {},\n    extraOptions: Object = {}\n  ): Promise<*> {\n    return this._requestAsync(\n      methodName,\n      {\n        httpMethod: 'put',\n        body: data,\n      },\n      extraOptions\n    );\n  }\n\n  async _requestAsync(\n    methodName: string,\n    options: RequestOptions,\n    extraRequestOptions: Object\n  ): Promise<*> {\n    const url = `${API_BASE_URL}/${methodName}`;\n\n    let reqOptions: Object = {\n      url,\n      method: options.httpMethod,\n      headers: {\n        'Exponent-Client': 'xdl',\n      },\n    };\n\n    if (this.idToken) {\n      reqOptions.headers['Authorization'] = `Bearer ${this.idToken}`;\n    }\n\n    if (this.accessToken) {\n      reqOptions.headers['Exp-Access-Token'] = this.accessToken;\n    }\n\n    // Handle qs\n    if (options.queryParameters) {\n      reqOptions.qs = options.queryParameters;\n    }\n\n    // Handle body\n    if (options.body) {\n      reqOptions.body = options.body;\n      reqOptions.json = true;\n    }\n\n    reqOptions = _.merge({}, reqOptions, extraRequestOptions);\n\n    let response;\n    let result;\n    try {\n      response = await request.promise(reqOptions);\n      result = response.body;\n    } catch (e) {\n      const error: ErrorWithResponseBody = new Error(\n        `There was a problem understanding the server. Please try again.`\n      );\n      error.responseBody = result;\n      logger.error(error);\n      throw error;\n    }\n\n    if (!result || typeof result !== 'object') {\n      let error: ErrorWithResponseBody = new Error(\n        `There was a problem understanding the server.`\n      );\n      error.responseBody = result;\n      throw error;\n    }\n\n    if (result.errors && result.errors.length) {\n      let responseError = result.errors[0];\n      let error = new ApiV2Error(responseError.message, responseError.code);\n      error.serverStack = responseError.stack;\n      error.details = responseError.details;\n      throw error;\n    }\n\n    return result.data;\n  }\n}\n"],"sourceRoot":"/xdl/src"}