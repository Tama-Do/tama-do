{"version":3,"sources":["Intercom.js"],"names":["async","user_id","user_hash","_isWindowDefined","let","deviceInfo","await","Diagnostics","getDeviceInfoAsync","limitLengthForIntercom","e","console","error","data","app_id","_version","version","_isBooted","window","Intercom","IntercomUpdateStyle","update","trackEvent","showNewMessage","setVersionName","name","metadata","message"],"mappings":";;;;;;;;;;+BAaOA,WAAsBC,OAAtBD,EAAwCE,SAAxCF,EAA4D;AACjE,QAAI;AACF,UAAIG,kBAAJ,EAAwB;AACtBC,YAAIC,aAAa,EAAjBD;;AAEA,YAAI;AACFC,uBAAaC,MAAMC,sCAAYC,kBAAZD,CAA+B;AAChDE,oCAAwB;AADwB,WAA/BF,CAAnBF;AAGF,SAJA,CAIE,OAAOK,CAAP,EAAU;AACVC,kBAAQC,KAARD,CAAcD,CAAdC;AACF;;AAEAP,YAAIS;AACFC,kBAAQ,UADND;AAEFZ,iBAFEY;AAGFX;AAHEW,WAICR,UAJDQ,CAAJT;;AAOA,YAAIW,QAAJ,EAAc;AACZF,8BACKA,IADLA;AAEEG,qBAASD;AAFXF;AAIF;;AAEA,YAAII,SAAJ,EAAe;AACb,cAAIhB,OAAJ,EAAa;AACX;AACA;AACAiB,mBAAOC,QAAPD,CAAgB,QAAhBA,EAA0BL,IAA1BK;AACF,WAJA,MAIO;AACL;AACAA,mBAAOC,QAAPD,CAAgB,UAAhBA;AACAA,mBAAOC,QAAPD,CAAgB,MAAhBA,EAAwBL,IAAxBK;AACF;AACF,SAVA,MAUO;AACLA,iBAAOC,QAAPD,CAAgB,MAAhBA,EAAwBL,IAAxBK;AACAD,sBAAY,IAAZA;AACF;AACAC,eAAOE,mBAAPF;AACF;AACF,KA1CA,CA0CE,OAAOR,CAAP,EAAU;AACVC,cAAQC,KAARD,CAAcD,CAAdC;AACF;AACF,G;;kBA9CsBU,M;;;;;QAgDNC,U,GAAAA,U;QAUAC,c,GAAAA,c;QAUAC,c,GAAAA,c;;;;AA7EhB;AAAA;AAAA;;;;;;AAEApB,IAAIW,QAAJX;AACAA,IAAIa,YAAY,KAAhBb;;AAEA,SAASD,gBAAT,GAA4B;AAC1B,SAAO,OAAOe,MAAP,KAAkB,WAAlB,IAAiCA,MAAjC,IAA2CA,OAAOC,QAAzD;AACF;;AAkDO,SAASG,UAAT,CAAoBG,IAApB,EAAkCC,QAAlC,EAAiD;AACtD,MAAI;AACF,QAAIvB,kBAAJ,EAAwB;AACtBe,aAAOC,QAAPD,CAAgB,YAAhBA,EAA8BO,IAA9BP,EAAoCQ,QAApCR;AACF;AACF,GAJA,CAIE,OAAOR,CAAP,EAAU;AACVC,YAAQC,KAARD,CAAcD,CAAdC;AACF;AACF;;AAEO,SAASY,cAAT,CAAwBI,OAAxB,EAAyC;AAC9C,MAAI;AACF,QAAIxB,kBAAJ,EAAwB;AACtBe,aAAOC,QAAPD,CAAgB,gBAAhBA,EAAkCS,OAAlCT;AACF;AACF,GAJA,CAIE,OAAOR,CAAP,EAAU;AACVC,YAAQC,KAARD,CAAcD,CAAdC;AACF;AACF;;AAEO,SAASa,cAAT,CAAwBC,IAAxB,EAAsC;AAC3CV,aAAWU,IAAXV;AACF","file":"../Intercom.js","sourcesContent":["/**\n * @flow\n */\n\nimport * as Diagnostics from './Diagnostics';\n\nlet _version;\nlet _isBooted = false;\n\nfunction _isWindowDefined() {\n  return typeof window !== 'undefined' && window && window.Intercom;\n}\n\nexport async function update(user_id: ?string, user_hash: ?string) {\n  try {\n    if (_isWindowDefined()) {\n      let deviceInfo = {};\n\n      try {\n        deviceInfo = await Diagnostics.getDeviceInfoAsync({\n          limitLengthForIntercom: true,\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n      let data = {\n        app_id: 'fhlr5ht1',\n        user_id,\n        user_hash,\n        ...deviceInfo,\n      };\n\n      if (_version) {\n        data = {\n          ...data,\n          version: _version,\n        };\n      }\n\n      if (_isBooted) {\n        if (user_id) {\n          // Call update so that any conversations carry over from the logged out to\n          // the logged in user.\n          window.Intercom('update', data);\n        } else {\n          // Was logged in and is now logging out, restart intercom.\n          window.Intercom('shutdown');\n          window.Intercom('boot', data);\n        }\n      } else {\n        window.Intercom('boot', data);\n        _isBooted = true;\n      }\n      window.IntercomUpdateStyle();\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function trackEvent(name: string, metadata: any) {\n  try {\n    if (_isWindowDefined()) {\n      window.Intercom('trackEvent', name, metadata);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function showNewMessage(message: string) {\n  try {\n    if (_isWindowDefined()) {\n      window.Intercom('showNewMessage', message);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n\nexport function setVersionName(name: string) {\n  _version = name;\n}\n"],"sourceRoot":"/xdl/src"}