{"version":3,"sources":["__integration_tests__/UserManager-test.js"],"names":["XDL_TEST_CLIENT_ID","describe","let","userForTest","userForTestPassword","beforeAll","async","process","env","__UNSAFE_EXPO_HOME_DIRECTORY","path","join","uuid","v1","UserManager","_newTestUserManager","username","password","newUser","await","registerAsync","email","givenName","familyName","logoutAsync","afterAll","fs","removeSync","api","ApiV2Client","clientForUser","postAsync","e","console","error","it","default","require","expect","toBeDefined","initialize","ensureLoggedInAsync","message","toEqual","loginAsync","user","getCurrentUserAsync","not","toBeNull","toBe","idToken","toBeFalsy","_getProfileSpy","jest","fn","_getProfileAsync","toHaveBeenCalled","_currentUser","users","Promise","all","toHaveBeenCalledTimes","refreshToken","initialUser","refreshSessionThreshold","_auth0RefreshTokenSpy","_auth0RefreshToken","currentUser","toBeCalled"],"mappings":"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","file":"../../__integration_tests__/UserManager-test.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs-extra';\nimport path from 'path';\nimport uuid from 'uuid';\nimport ApiV2Client from '../ApiV2';\nimport { UserManagerInstance } from '../User';\n\nconst XDL_TEST_CLIENT_ID = 'o0YygTgKhOTdoWj10Yl9nY2P0SMTw38Y';\n\nimport type { User } from '../User';\n\ndescribe('UserManager', () => {\n  let userForTest;\n  let userForTestPassword;\n\n  beforeAll(async () => {\n    process.env.__UNSAFE_EXPO_HOME_DIRECTORY = path.join(\n      '/',\n      'tmp',\n      `.expo-${uuid.v1()}`\n    );\n\n    const UserManager = _newTestUserManager();\n\n    const username = `xdl-test-${uuid.v1()}`;\n    const password = uuid.v1();\n\n    // Register a new user that we can use for this test run\n    const newUser = await UserManager.registerAsync({\n      username,\n      password,\n      email: `adam+${username}@getexponent.com`,\n      givenName: 'XDL',\n      familyName: 'Test User',\n    });\n\n    userForTest = newUser;\n    userForTestPassword = password; // save password so we can use it to login\n\n    await UserManager.logoutAsync(); // log us out so we're in a clean state for these tests\n  });\n\n  afterAll(async () => {\n    if (process.env.__UNSAFE_EXPO_HOME_DIRECTORY) {\n      fs.removeSync(process.env.__UNSAFE_EXPO_HOME_DIRECTORY);\n    }\n\n    const api = ApiV2Client.clientForUser(userForTest);\n    try {\n      await api.postAsync('auth/deleteUser');\n    } catch (e) {\n      console.error(e);\n    }\n  });\n\n  it('should make available a global, shared UserManager singleton', () => {\n    const { default: UserManager } = require('../User');\n    expect(UserManager).toBeDefined();\n    expect(UserManager.initialize).toBeDefined();\n  });\n\n  it('should not have a currently logged in user', async () => {\n    const UserManager = _newTestUserManager();\n    try {\n      await UserManager.ensureLoggedInAsync();\n    } catch (e) {\n      expect(e.message).toEqual('Not logged in');\n    }\n  });\n\n  it('should login successfully', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    const user = await UserManager.getCurrentUserAsync();\n    expect(user).not.toBeNull();\n    if (!user) {\n      return;\n    }\n    expect(user.username).toBe(userForTest.username);\n    expect(user.idToken).not.toBeFalsy();\n  });\n\n  it('should use cached user after first run of getCurrentUserAsync() instead of verifying token with Auth0', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    // Spy on getProfileAsync\n    const _getProfileSpy = jest.fn(UserManager._getProfileAsync);\n    // $FlowFixMe\n    UserManager._getProfileAsync = _getProfileSpy;\n\n    await UserManager.getCurrentUserAsync();\n\n    expect(_getProfileSpy).not.toHaveBeenCalled();\n  });\n\n  it('should correctly use lock to prevent getting session twice, simulatenously', async () => {\n    const UserManager = _newTestUserManager();\n    await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n\n    UserManager._currentUser = null;\n\n    // Spy on getProfileAsync\n    const _getProfileSpy = jest.fn(UserManager._getProfileAsync);\n    // $FlowFixMe\n    UserManager._getProfileAsync = _getProfileSpy;\n\n    const users = ((await Promise.all([\n      UserManager.getCurrentUserAsync(),\n      UserManager.getCurrentUserAsync(),\n    ]): any): Array<User>);\n\n    expect(_getProfileSpy).toHaveBeenCalledTimes(1);\n\n    // This shouldn't have changed, but just double check it\n    expect(users[0].idToken).toEqual(users[1].idToken);\n    expect(users[0].refreshToken).toEqual(users[1].refreshToken);\n  });\n\n  it('should detect expired token when calling getCurrentUserAsync', async () => {\n    const UserManager = _newTestUserManager();\n    // Make sure we have a session\n    const initialUser = await UserManager.loginAsync('user-pass', {\n      username: userForTest.username,\n      password: userForTestPassword,\n    });\n    // set the refresh session threshold to a very high value, simulating an expired token\n    UserManager.refreshSessionThreshold = 63072000;\n\n    // Spy on _auth0RefreshToken\n    const _auth0RefreshTokenSpy = jest.fn(UserManager._auth0RefreshToken);\n    // $FlowFixMe\n    UserManager._auth0RefreshToken = _auth0RefreshTokenSpy;\n\n    const currentUser = ((await UserManager.getCurrentUserAsync(): any): User);\n    expect(_auth0RefreshTokenSpy).toBeCalled();\n    expect(currentUser.idToken).not.toEqual(initialUser.idToken);\n  });\n});\n\nfunction _newTestUserManager() {\n  const UserManager = new UserManagerInstance();\n  UserManager.initialize(XDL_TEST_CLIENT_ID); // XDL Test Client\n  return UserManager;\n}\n"],"sourceRoot":"/xdl/src"}