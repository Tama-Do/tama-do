{"version":3,"sources":["Api.js"],"names":["async","url","method","requestBody","requestOptions","clientId","await","Session","clientIdAsync","user","UserManager","getCurrentUserAsync","idToken","accessToken","let","headers","options","body","json","response","request","promise","responseBody","responseObj","_","isString","JSON","parse","e","ErrorCode","INVALID_JSON","err","ApiError","code","serverError","_callMethodAsync","path","progressFunction","retryFunction","promptShown","currentProgress","warningTimer","setTimeout","TIMER_DURATION","Promise","resolve","reject","progress","timeout","TIMEOUT","Error","on","roundedProgress","Math","round","percent","clearTimeout","undefined","pipe","fs","createWriteStream","_downloadAsync","message","_isApiError","ROOT_BASE_URL","Config","api","scheme","host","port","API_BASE_URL","ApiClient","static","callMethodAsync","methodName","args","encodeURIComponent","stringify","callPathAsync","versionsAsync","_versionCache","getAsync","xdlSchemaAsync","sdkVersion","_schemaCaches","hasOwnProperty","join","__dirname","sdkVersionsAsync","versions","sdkVersions","downloadAsync","outputPath","extract","dotExpoHomeDirectory","UserSettings","tmpPath","Extract","extractAsync","rimraf","sync"],"mappings":"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","file":"../Api.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport request from 'request';\nimport progress from 'request-progress';\nimport fs from 'fs';\nimport rimraf from 'rimraf';\nimport path from 'path';\n\nimport { Cacher } from './tools/FsCache';\nimport Config from './Config';\nimport ErrorCode from './ErrorCode';\nimport * as Extract from './Extract';\nimport * as Session from './Session';\nimport UserManager from './User';\nimport UserSettings from './UserSettings';\nimport XDLError from './XDLError';\n\nconst TIMER_DURATION = 30000;\nconst TIMEOUT = 60000;\n\nfunction ApiError(code, message) {\n  let err = new Error(message);\n  // $FlowFixMe error has no property code\n  err.code = code;\n  // $FlowFixMe error has no property _isApiError\n  err._isApiError = true;\n  return err;\n}\n\nlet ROOT_BASE_URL = `${Config.api.scheme}://${Config.api.host}`;\nif (Config.api.port) {\n  ROOT_BASE_URL += ':' + Config.api.port;\n}\nlet API_BASE_URL = ROOT_BASE_URL + '/--/api/';\n\nasync function _callMethodAsync(\n  url,\n  method,\n  requestBody,\n  requestOptions\n): Promise<any> {\n  const clientId = await Session.clientIdAsync();\n  const user = (await UserManager.getCurrentUserAsync()) || {};\n\n  const { idToken, accessToken } = user;\n\n  let headers: any = {\n    'Exp-ClientId': clientId,\n  };\n\n  if (idToken) {\n    headers['Authorization'] = `Bearer ${idToken}`;\n  }\n\n  if (accessToken) {\n    headers['Exp-Access-Token'] = accessToken;\n  }\n\n  let options = {\n    url,\n    method: method || 'get',\n    headers,\n  };\n\n  if (requestOptions) {\n    options = {\n      ...options,\n      ...requestOptions,\n    };\n  }\n\n  if (requestBody) {\n    options = {\n      ...options,\n      body: requestBody,\n      json: true,\n    };\n  }\n\n  let response = await request.promise(options);\n  let responseBody = response.body;\n  var responseObj;\n  if (_.isString(responseBody)) {\n    try {\n      responseObj = JSON.parse(responseBody);\n    } catch (e) {\n      throw new XDLError(\n        ErrorCode.INVALID_JSON,\n        'Invalid JSON returned from API: ' +\n          e +\n          '. Response body: ' +\n          responseBody\n      );\n    }\n  } else {\n    responseObj = responseBody;\n  }\n  if (responseObj.err) {\n    let err = ApiError(\n      responseObj.code || 'API_ERROR',\n      'API Response Error: ' + responseObj.err\n    );\n    // $FlowFixMe can't add arbitrary properties to error\n    err.serverError = responseObj.err;\n    throw err;\n  } else {\n    return responseObj;\n  }\n}\n\nasync function _downloadAsync(url, path, progressFunction, retryFunction) {\n  let promptShown = false;\n  let currentProgress = 0;\n  let warningTimer = setTimeout(() => {\n    if (retryFunction) {\n      retryFunction();\n    }\n    promptShown = true;\n  }, TIMER_DURATION);\n\n  return new Promise((resolve, reject) => {\n    try {\n      progress(\n        request(url, { timeout: TIMEOUT }, err => {\n          if (err !== null) {\n            if (err.code === 'ETIMEDOUT') {\n              reject(Error('Server timeout.'));\n            } else {\n              reject(\n                Error(\n                  \"Couldn't connect to the server, check your internet connection.\"\n                )\n              );\n            }\n          }\n        })\n      )\n        .on('progress', progress => {\n          const roundedProgress = Math.round(progress.percent * 100);\n          if (currentProgress !== roundedProgress) {\n            currentProgress = roundedProgress;\n            clearTimeout(warningTimer);\n            if (!promptShown) {\n              warningTimer = setTimeout(() => {\n                if (retryFunction) {\n                  retryFunction();\n                }\n                promptShown = true;\n              }, TIMER_DURATION);\n            }\n          }\n          let percent = progress.percent !== undefined ? progress.percent : 0;\n          if (progressFunction) {\n            progressFunction(percent);\n          }\n        })\n        .pipe(fs.createWriteStream(path))\n        .on('finish', () => {\n          // Since on('finish') overrides on('progress'), loading bar will never get to 100%\n          // this line fixes it.\n          if (progressFunction) {\n            progressFunction(100);\n          }\n          clearTimeout(warningTimer);\n          resolve();\n        })\n        .on('error', reject);\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\nexport default class ApiClient {\n  static host: string = Config.api.host;\n  static port: number = Config.api.port || 80;\n\n  static _versionCache = new Cacher(\n    async () => {\n      return await ApiClient.callPathAsync('/--/versions');\n    },\n    'versions.json',\n    0,\n    path.join(__dirname, '../caches/versions.json')\n  );\n\n  static _schemaCaches = {};\n\n  static async callMethodAsync(\n    methodName: string,\n    args: Array<*>,\n    method: string,\n    requestBody: ?Object,\n    requestOptions: ?Object = {}\n  ): Promise<any> {\n    let url =\n      API_BASE_URL +\n      encodeURIComponent(methodName) +\n      '/' +\n      encodeURIComponent(JSON.stringify(args));\n    return _callMethodAsync(url, method, requestBody, requestOptions);\n  }\n\n  static async callPathAsync(\n    path,\n    method,\n    requestBody,\n    requestOptions: ?Object = {}\n  ) {\n    let url = ROOT_BASE_URL + path;\n    return _callMethodAsync(url, method, requestBody, requestOptions);\n  }\n\n  static async versionsAsync() {\n    return await ApiClient._versionCache.getAsync();\n  }\n\n  static async xdlSchemaAsync(sdkVersion) {\n    if (!ApiClient._schemaCaches.hasOwnProperty(sdkVersion)) {\n      ApiClient._schemaCaches[sdkVersion] = new Cacher(\n        async () => {\n          return await ApiClient.callPathAsync(`/--/xdl-schema/${sdkVersion}`);\n        },\n        `schema-${sdkVersion}.json`,\n        0,\n        path.join(__dirname, `../caches/schema-${sdkVersion}.json`)\n      );\n    }\n\n    return await ApiClient._schemaCaches[sdkVersion].getAsync();\n  }\n\n  static async sdkVersionsAsync() {\n    let versions = await ApiClient.versionsAsync();\n    return versions.sdkVersions;\n  }\n\n  static async downloadAsync(\n    url,\n    outputPath,\n    options = {},\n    progressFunction,\n    retryFunction\n  ) {\n    if (options.extract) {\n      let dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n      let tmpPath = path.join(dotExpoHomeDirectory, 'tmp-download-file');\n      await _downloadAsync(url, tmpPath);\n      await Extract.extractAsync(tmpPath, outputPath);\n      rimraf.sync(tmpPath);\n    } else {\n      await _downloadAsync(url, outputPath, progressFunction, retryFunction);\n    }\n  }\n}\n"],"sourceRoot":"/xdl/src"}