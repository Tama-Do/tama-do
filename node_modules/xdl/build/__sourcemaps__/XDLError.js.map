{"version":3,"sources":["XDLError.js"],"names":["XDLError","Error","constructor","code","message","options","noTrack","isXDLError","Analytics","logEvent","Intercom","trackEvent"],"mappings":";;;;;;;;AAIA;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;AAIe,MAAMA,QAAN,SAAuBC,KAAvB,CAA6B;;AAI1CC,cACEC,IADFD,EAEEE,OAFFF,EAGEG,UAAgC,EAAEC,SAAS,KAAX,EAHlCJ,EAIE;AACA,UAAME,OAAN;;AAEA,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKI,UAAL,GAAkB,IAAlB;;AAEA,QAAIF,WAAW,CAACA,QAAQC,OAAxB,EAAiC;AAC/BE,wCAAUC,QAAVD,CAAmB,WAAnBA,EAAgC;AAC9BL,YAD8B;AAE9BC;AAF8B,OAAhCI;;AAKAE,sCAASC,UAATD,CAAoB,OAApBA,EAA6B;AAC3BP,YAD2B;AAE3BC;AAF2B,OAA7BM;AAIF;AACF;AAzB0C;kBAAvBV,Q","file":"../XDLError.js","sourcesContent":["/**\n * @flow\n */\n\nimport * as Analytics from './Analytics';\nimport * as Intercom from './Intercom';\n\nimport type { ErrorCodes } from './ErrorCode';\n\nexport default class XDLError extends Error {\n  code: string;\n  isXDLError: boolean;\n\n  constructor(\n    code: $Keys<ErrorCodes>,\n    message: string,\n    options: { noTrack: boolean } = { noTrack: false }\n  ) {\n    super(message);\n\n    this.code = code;\n    this.isXDLError = true;\n\n    if (options && !options.noTrack) {\n      Analytics.logEvent('XDL Error', {\n        code,\n        message,\n      });\n\n      Intercom.trackEvent('error', {\n        code,\n        message,\n      });\n    }\n  }\n}\n"],"sourceRoot":"/xdl/src"}