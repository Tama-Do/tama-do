{"version":3,"sources":["Diagnostics.js"],"names":["async","info","let","user","await","UserManager","getCurrentUserAsync","username","expoHome","UserSettings","dotExpoHomeDirectory","infoJsonFile","path","join","writeAsync","tempDir","Env","home","archivePath","Utils","ncpAsync","filter","filename","includes","settingsJsonFile","SETTINGS_FILE_NAME","settingsJson","readAsync","accessToken","e","console","error","targz","compress","rimraf","sync","file","fs","createReadStream","formData","archive","response","Api","callMethodAsync","url","_uploadLogsAsync","options","Binaries","sourceBashLoginScriptsAsync","whichCommand","process","platform","result","spawnAsync","nodeVersion","_","trim","stdout","nodePath","npmVersion","npmPath","watchmanVersion","Watchman","unblockAndGetVersionAsync","watchmanPath","adbVersion","adbPath","env","PATH","shell","SHELL","os","homedir","nvmPath","NVM_PATH","lang","LANG","dirname","__dirname","memoryFree","_formatBytes","freemem","memoryTotal","totalmem","ip","address","hostname","xdeProcesses","child_process","execSync","toString","numXdeProcesses","watchmanProcesses","numWatchmanProcesses","ngrokProcesses","numNgrokProcesses","isXcodeInstalled","xcrunVersion","xcodebuildVersion","launchctlLimit","uploadLogs","limitLengthForIntercom","mapValues","value","length","startsWith","substring","getDeviceInfoAsync","bytes","toFixed"],"mappings":"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","file":"../Diagnostics.js","sourcesContent":["/**\n * @flow\n */\n\nimport 'instapromise';\n\nimport _ from 'lodash';\nimport child_process from 'child_process';\nimport fs from 'fs';\nimport ip from 'ip';\nimport JsonFile from '@exponent/json-file';\nimport os from 'os';\nimport path from 'path';\nimport rimraf from 'rimraf';\nimport spawnAsync from '@exponent/spawn-async';\nimport targz from 'tar.gz';\n\nimport Api from './Api';\nimport * as Binaries from './Binaries';\nimport * as Env from './Env';\nimport UserManager from './User';\nimport UserSettings from './UserSettings';\nimport * as Utils from './Utils';\nimport * as Watchman from './Watchman';\n\nasync function _uploadLogsAsync(info: any): Promise<boolean | string> {\n  let user = await UserManager.getCurrentUserAsync();\n  let username = user ? user.username : 'anonymous';\n\n  // write info to file\n  let expoHome = UserSettings.dotExpoHomeDirectory();\n  let infoJsonFile = new JsonFile(path.join(expoHome, 'debug-info.json'));\n  await infoJsonFile.writeAsync(info);\n\n  // copy files to tempDir\n  let tempDir = path.join(Env.home(), `${username}-diagnostics`);\n  let archivePath = path.join(expoHome, 'diagnostics.tar.gz');\n  await Utils.ncpAsync(expoHome, tempDir, {\n    filter: filename => {\n      if (\n        filename.includes('diagnostics') ||\n        filename.includes('starter-app-cache') ||\n        filename.includes('android-apk-cache') ||\n        filename.includes('ios-simulator-app-cache')\n      ) {\n        return false;\n      } else {\n        return true;\n      }\n    },\n  });\n\n  // remove access token\n  try {\n    let settingsJsonFile = new JsonFile(\n      path.join(tempDir, UserSettings.SETTINGS_FILE_NAME)\n    );\n    let settingsJson = await settingsJsonFile.readAsync();\n    settingsJson.accessToken = 'redacted';\n    await settingsJsonFile.writeAsync(settingsJson);\n  } catch (e) {\n    console.error(e);\n  }\n\n  // compress\n  await targz().compress(tempDir, archivePath);\n  rimraf.sync(tempDir);\n\n  // upload\n  let file = fs.createReadStream(archivePath);\n  let formData = {\n    archive: file,\n  };\n\n  let response = await Api.callMethodAsync(\n    'uploadDiagnostics',\n    [{}],\n    'put',\n    null,\n    { formData }\n  );\n  return response.url;\n}\n\n/* eslint-disable prefer-template */\n// From http://stackoverflow.com/questions/15900485/correct-way-to-convert-size-in-bytes-to-kb-mb-gb-in-javascript\nfunction _formatBytes(bytes: number): string {\n  if (bytes >= 1000000000) {\n    return (bytes / 1000000000).toFixed(2) + ' GB';\n  } else if (bytes >= 1000000) {\n    return (bytes / 1000000).toFixed(2) + ' MB';\n  } else if (bytes >= 1000) {\n    return (bytes / 1000).toFixed(2) + ' KB';\n  } else if (bytes > 1) {\n    return bytes + ' bytes';\n  } else if (bytes === 1) {\n    return bytes + '${bytes} byte';\n  } else {\n    return '0 bytes';\n  }\n}\n/* eslint-enable prefer-template */\n\nexport async function getDeviceInfoAsync(options: any = {}): Promise<any> {\n  let info = {};\n\n  await Binaries.sourceBashLoginScriptsAsync();\n  let whichCommand = process.platform === 'win32' ? 'where' : 'which';\n\n  try {\n    let result = await spawnAsync('node', ['--version']);\n    info.nodeVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['node']);\n    info.nodePath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync('npm', ['--version']);\n    info.npmVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['npm']);\n    info.npmPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    info.watchmanVersion = await Watchman.unblockAndGetVersionAsync();\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['watchman']);\n    info.watchmanPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync('adb', ['version']);\n    info.adbVersion = _.trim(result.stdout);\n  } catch (e) {}\n\n  try {\n    let result = await spawnAsync(whichCommand, ['adb']);\n    info.adbPath = _.trim(result.stdout);\n  } catch (e) {}\n\n  info.path = process.env.PATH;\n  info.shell = process.env.SHELL;\n  info.home = os.homedir();\n  info.nvmPath = process.env.NVM_PATH;\n  info.lang = process.env.LANG;\n  info.dirname = __dirname;\n  info.memoryFree = _formatBytes(os.freemem());\n  info.memoryTotal = _formatBytes(os.totalmem());\n  info.ip = ip.address();\n  info.hostname = os.hostname();\n\n  // TODO: fix these commands on linux\n  if (process.platform === 'darwin') {\n    // || process.platform === 'linux') {\n    try {\n      info.xdeProcesses = _.trim(\n        child_process.execSync('pgrep XDE | xargs ps -p').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.numXdeProcesses = _.trim(\n        child_process.execSync('pgrep XDE | wc -l').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.watchmanProcesses = _.trim(\n        child_process.execSync('pgrep watchman | xargs ps -p').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.numWatchmanProcesses = _.trim(\n        child_process.execSync('pgrep watchman | wc -l').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.ngrokProcesses = _.trim(\n        child_process.execSync('pgrep ngrok | xargs ps -p').toString()\n      );\n    } catch (e) {}\n\n    try {\n      info.numNgrokProcesses = _.trim(\n        child_process.execSync('pgrep ngrok | wc -l').toString()\n      );\n    } catch (e) {}\n  }\n\n  if (process.platform === 'darwin') {\n    // `xcrun` and `xcodebuild` will pop up a dialog if Xcode isn't installed\n    if (Binaries.isXcodeInstalled()) {\n      try {\n        let result = await spawnAsync('xcrun', ['--version']);\n        info.xcrunVersion = _.trim(result.stdout);\n      } catch (e) {}\n\n      try {\n        let result = await spawnAsync('xcodebuild', ['-version']);\n        info.xcodebuildVersion = _.trim(result.stdout);\n      } catch (e) {}\n    }\n\n    try {\n      let result = await spawnAsync('launchctl', ['limit']);\n      info.launchctlLimit = _.trim(result.stdout);\n    } catch (e) {}\n  }\n\n  // TODO: can probably get rid of these options if we remove Intercom\n  if (options.uploadLogs) {\n    info.url = await _uploadLogsAsync(info);\n  }\n\n  if (options.limitLengthForIntercom) {\n    info = _.mapValues(info, value => {\n      if (value && value.length > 100 && !value.startsWith('http')) {\n        return value.substring(0, 100);\n      } else {\n        return value;\n      }\n    });\n  }\n\n  return info;\n}\n"],"sourceRoot":"/xdl/src"}