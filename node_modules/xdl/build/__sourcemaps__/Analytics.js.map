{"version":3,"sources":["Analytics.js"],"names":["setSegmentNodeKey","setSegmentWebInstance","setUserProperties","setVersionName","logEvent","let","_segmentNodeInstance","_segmentWebInstance","_userId","_version","PLATFORM_TO_ANALYTICS_PLATFORM","darwin","win32","linux","key","instance","userId","traits","identify","context","_getContext","window","analytics","version","amplitude","getInstance","name","properties","track","event","platform","os","ip","address","device","model","brand","release","app"],"mappings":";;;;;QAkBgBA,iB,GAAAA,iB;QAIAC,qB,GAAAA,qB;QAIAC,iB,GAAAA,iB;QAqBAC,c,GAAAA,c;QAcAC,Q,GAAAA,Q;;;;AAzDhB;AAAA;AAAA;;AACA;;;;AACA;AAAA;AAAA;;;;AAEAC,IAAIC,oBAAJD;;AACAA,IAAIE,mBAAJF;AACAA,IAAIG,OAAJH;AACAA,IAAII,QAAJJ;AACA,MAAMK,iCAAiC;AACrCC,UAAQ,KAD6B;AAErCC,SAAO,SAF8B;AAGrCC,SAAO;AAH8B,CAAvC;;AAMO,SAASb,iBAAT,CAA2Bc,GAA3B,EAAwC;AAC7CR,yBAAuB,sDAAYQ,GAAZ,CAAvBR;AACF;;AAEO,SAASL,qBAAT,CAA+Bc,QAA/B,EAA8C;AACnDR,wBAAsBQ,QAAtBR;AACF;;AAEO,SAASL,iBAAT,CAA2Bc,MAA3B,EAA2CC,MAA3C,EAAwD;AAC7DT,YAAUQ,MAAVR;;AAEA,MAAIF,oBAAJ,EAA0B;AACxBA,yBAAqBY,QAArBZ,CAA8B;AAC5BU,YAD4B;AAE5BC,YAF4B;AAG5BE,eAASC;AAHmB,KAA9Bd;AAKF;;AAEA,MAAIC,mBAAJ,EAAyB;AACvB;AACAJ,mBAAeM,QAAfN;;AAEAkB,WAAOC,SAAPD,CAAiBH,QAAjBG,CAA0BL,MAA1BK,EAAkCJ,MAAlCI,EAA0C;AACxCF,eAASC;AAD+B,KAA1CC;AAGF;AACF;;AAEO,SAASlB,cAAT,CAAwBoB,OAAxB,EAAyC;AAC9Cd,aAAWc,OAAXd;;AAEA,MACEF,uBACAc,OAAOG,SADPjB,IAEAc,OAAOG,SAAPH,CAAiBI,WAFjBlB,IAGAc,OAAOG,SAAPH,CAAiBI,WAAjBJ,EAJF,EAKE;AACA;AACAA,WAAOG,SAAPH,CAAiBI,WAAjBJ,GAA+BlB,cAA/BkB,CAA8CE,OAA9CF;AACF;AACF;;AAEO,SAASjB,QAAT,CAAkBsB,IAAlB,EAAgCC,aAAkB,EAAlD,EAAsD;AAC3D,MAAIrB,wBAAwBE,OAA5B,EAAqC;AACnCF,yBAAqBsB,KAArBtB,CAA2B;AACzBU,cAAQR,OADiB;AAEzBqB,aAAOH,IAFkB;AAGzBC,gBAHyB;AAIzBR,eAASC;AAJgB,KAA3Bd;AAMF;;AAEA,MAAIC,mBAAJ,EAAyB;AACvB;AACAJ,mBAAeM,QAAfN;;AAEAkB,WAAOC,SAAPD,CAAiBO,KAAjBP,CAAuBK,IAAvBL,EAA6BM,UAA7BN,EAAyC;AACvCF,eAASC;AAD8B,KAAzCC;AAGF;AACF;;AAEA,SAASD,WAAT,GAAuB;AACrBf,MAAIyB,WAAWpB,+BAA+BqB,YAAGD,QAAHC,EAA/BrB,CAAfL;AACAA,MAAIc,UAAU;AACZa,QAAIA,4BAAGC,OAAHD,EADQ;AAEZE,YAAQ;AACNC,aAAOL,QADD;AAENM,aAAON;AAFD,KAFI;AAMZC,QAAI;AACFL,YAAMI,QADJ;AAEFP,eAASQ,YAAGM,OAAHN;AAFP,KANQ;AAUZO,SAAK;AAVO,GAAdjC;;AAaA,MAAII,QAAJ,EAAc;AACZU,YAAQmB,GAARnB,GAAc;AACZI,eAASd;AADG,KAAdU;AAGF;;AAEA,SAAOA,OAAP;AACF","file":"../Analytics.js","sourcesContent":["/**\n * @flow\n */\n\nimport ip from 'ip';\nimport os from 'os';\nimport Segment from 'analytics-node';\n\nlet _segmentNodeInstance;\nlet _segmentWebInstance;\nlet _userId;\nlet _version;\nconst PLATFORM_TO_ANALYTICS_PLATFORM = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nexport function setSegmentNodeKey(key: string) {\n  _segmentNodeInstance = new Segment(key);\n}\n\nexport function setSegmentWebInstance(instance: any) {\n  _segmentWebInstance = instance;\n}\n\nexport function setUserProperties(userId: string, traits: any) {\n  _userId = userId;\n\n  if (_segmentNodeInstance) {\n    _segmentNodeInstance.identify({\n      userId,\n      traits,\n      context: _getContext(),\n    });\n  }\n\n  if (_segmentWebInstance) {\n    // The Amplitude SDK isn't initialized right away, so call setVersion before every call to make sure it's actually updated.\n    setVersionName(_version);\n\n    window.analytics.identify(userId, traits, {\n      context: _getContext(),\n    });\n  }\n}\n\nexport function setVersionName(version: string) {\n  _version = version;\n\n  if (\n    _segmentWebInstance &&\n    window.amplitude &&\n    window.amplitude.getInstance &&\n    window.amplitude.getInstance()\n  ) {\n    // Segment injects amplitude into the window. Call this manually because Segment isn't passing it along.\n    window.amplitude.getInstance().setVersionName(version);\n  }\n}\n\nexport function logEvent(name: string, properties: any = {}) {\n  if (_segmentNodeInstance && _userId) {\n    _segmentNodeInstance.track({\n      userId: _userId,\n      event: name,\n      properties,\n      context: _getContext(),\n    });\n  }\n\n  if (_segmentWebInstance) {\n    // The Amplitude SDK isn't initialized right away, so call setVersion before every call to make sure it's actually updated.\n    setVersionName(_version);\n\n    window.analytics.track(name, properties, {\n      context: _getContext(),\n    });\n  }\n}\n\nfunction _getContext() {\n  let platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()];\n  let context = {\n    ip: ip.address(),\n    device: {\n      model: platform,\n      brand: platform,\n    },\n    os: {\n      name: platform,\n      version: os.release(),\n    },\n    app: {},\n  };\n\n  if (_version) {\n    context.app = {\n      version: _version,\n    };\n  }\n\n  return context;\n}\n"],"sourceRoot":"/xdl/src"}