{"version":3,"sources":["project/ProjectUtils.js"],"names":["async","file","await","fsp","stat","isFile","e","fileExistsAsync","projectRoot","appJsonExists","path","join","expJsonExists","Config","developerTool","configFilenameAsync","expRcPath","fs","existsSync","json5","readAsync","logError","toString","readExpRcAsync","let","exp","pkg","configName","configPath","expo","isJsonFileError","message","startsWith","cause","packageJsonPath","nodeModulesPath","resolve","name","slug","toLowerCase","version","readConfigJsonAsync","logWithLevel","logDebug","logInfo","logWarning","clearNotification","attachLoggerStream","MAX_MESSAGE_LENGTH","_projectRootToLogger","_getLogger","logger","Logger","child","type","project","level","object","msg","id","useRedux","useReduxNotifications","debug","info","warn","error","state","store","dispatch","actions","notifications","add","tag","truncatedMessage","length","substring","Analytics","logEvent","clear","stream","addStream"],"mappings":"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","file":"../../project/ProjectUtils.js","sourcesContent":["/**\n * @flow\n */\n\nimport fs from 'fs';\nimport fsp from 'mz/fs';\nimport path from 'path';\n\nimport JsonFile from '@exponent/json-file';\nimport slug from 'slugify';\n\nimport * as Analytics from '../Analytics';\nimport Config from '../Config';\nimport Logger from '../Logger';\nimport * as state from '../state';\n\nconst MAX_MESSAGE_LENGTH = 200;\nlet _projectRootToLogger = {};\n\nfunction _getLogger(projectRoot: string) {\n  let logger = _projectRootToLogger[projectRoot];\n  if (!logger) {\n    logger = Logger.child({\n      type: 'project',\n      project: path.resolve(projectRoot),\n    });\n    _projectRootToLogger[projectRoot] = logger;\n  }\n\n  return logger;\n}\n\nexport function logWithLevel(\n  projectRoot: string,\n  level: string,\n  object: any,\n  msg: string,\n  id: ?string\n) {\n  let useRedux = id && Config.useReduxNotifications;\n\n  let logger = _getLogger(projectRoot);\n  switch (level) {\n    case 'debug':\n      logger.debug(object, msg);\n      break;\n    case 'info':\n      logger.info(object, msg);\n      break;\n    case 'warn':\n      if (!useRedux) {\n        logger.warn(object, msg);\n      }\n      break;\n    case 'error':\n      if (!useRedux) {\n        logger.error(object, msg);\n      }\n      break;\n    default:\n      logger.debug(object, msg);\n      break;\n  }\n\n  if (useRedux && (level === 'warn' || level === 'error')) {\n    state.store.dispatch(\n      state.actions.notifications.add(projectRoot, id, msg, projectRoot, level)\n    );\n  }\n}\n\nexport function logDebug(\n  projectRoot: string,\n  tag: string,\n  message: string,\n  id: ?string\n) {\n  _getLogger(projectRoot).debug({ tag }, message.toString());\n}\n\nexport function logInfo(\n  projectRoot: string,\n  tag: string,\n  message: string,\n  id: ?string\n) {\n  if (id && Config.useReduxNotifications) {\n    state.store.dispatch(\n      state.actions.notifications.add(projectRoot, id, message, tag, 'info')\n    );\n  } else {\n    _getLogger(projectRoot).info({ tag }, message.toString());\n  }\n}\n\nexport function logError(\n  projectRoot: string,\n  tag: string,\n  message: string,\n  id: ?string\n) {\n  if (id && Config.useReduxNotifications) {\n    state.store.dispatch(\n      state.actions.notifications.add(projectRoot, id, message, tag, 'error')\n    );\n  } else {\n    _getLogger(projectRoot).error({ tag }, message.toString());\n  }\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n  Analytics.logEvent('Project Error', {\n    projectRoot,\n    tag,\n    message: truncatedMessage,\n  });\n}\n\nexport function logWarning(\n  projectRoot: string,\n  tag: string,\n  message: string,\n  id: ?string\n) {\n  if (id && Config.useReduxNotifications) {\n    state.store.dispatch(\n      state.actions.notifications.add(projectRoot, id, message, tag, 'warn')\n    );\n  } else {\n    _getLogger(projectRoot).warn({ tag }, message.toString());\n  }\n\n  let truncatedMessage = message.toString();\n  if (truncatedMessage.length > MAX_MESSAGE_LENGTH) {\n    truncatedMessage = truncatedMessage.substring(0, MAX_MESSAGE_LENGTH);\n  }\n  Analytics.logEvent('Project Warning', {\n    projectRoot,\n    tag,\n    message: truncatedMessage,\n  });\n}\n\nexport function clearNotification(projectRoot: string, id: string) {\n  if (Config.useReduxNotifications) {\n    state.store.dispatch(state.actions.notifications.clear(projectRoot, id));\n  }\n}\n\nexport function attachLoggerStream(projectRoot: string, stream: any) {\n  _getLogger(projectRoot).addStream(stream);\n}\n\nexport async function fileExistsAsync(file: string): Promise<boolean> {\n  try {\n    return (await fsp.stat(file)).isFile();\n  } catch (e) {\n    return false;\n  }\n}\n\nexport async function configFilenameAsync(\n  projectRoot: string\n): Promise<string> {\n  // we should always default to exp.json, and only use app.json if it exists\n  const appJsonExists = await fileExistsAsync(\n    path.join(projectRoot, 'app.json')\n  );\n  const expJsonExists = await fileExistsAsync(\n    path.join(projectRoot, 'exp.json')\n  );\n\n  if (appJsonExists) {\n    return 'app.json';\n  } else if (expJsonExists || Config.developerTool !== 'crna') {\n    return 'exp.json';\n  } else {\n    return 'app.json';\n  }\n}\n\nexport async function readExpRcAsync(projectRoot: string): Promise<any> {\n  const expRcPath = path.join(projectRoot, '.exprc');\n\n  if (!fs.existsSync(expRcPath)) {\n    return {};\n  }\n\n  try {\n    return await new JsonFile(expRcPath, { json5: true }).readAsync();\n  } catch (e) {\n    logError(projectRoot, 'expo', `Error parsing JSON file: ${e.toString()}`);\n    return {};\n  }\n}\n\nexport async function readConfigJsonAsync(projectRoot: string): Promise<any> {\n  let exp;\n  let pkg;\n\n  const configName = await configFilenameAsync(projectRoot);\n  const configPath = path.join(projectRoot, configName);\n\n  try {\n    exp = await new JsonFile(configPath, { json5: true }).readAsync();\n\n    if (configName === 'app.json') {\n      // if we're not using exp.json, then we've stashed everything under an expo key\n      // this is only for app.json at time of writing\n      exp = exp.expo;\n    }\n  } catch (e) {\n    if (e.isJsonFileError) {\n      // TODO: add error codes to json-file\n      if (e.message.startsWith('Error parsing JSON file')) {\n        logError(\n          projectRoot,\n          'expo',\n          `Error parsing JSON file: ${e.cause.toString()}`\n        );\n        return { exp: null, pkg: null };\n      }\n    }\n\n    // exp missing. might be in package.json\n  }\n\n  try {\n    const packageJsonPath = exp && exp.nodeModulesPath\n      ? path.join(\n          path.resolve(projectRoot, exp.nodeModulesPath),\n          'package.json'\n        )\n      : path.join(projectRoot, 'package.json');\n    pkg = await new JsonFile(packageJsonPath).readAsync();\n  } catch (e) {\n    if (e.isJsonFileError) {\n      // TODO: add error codes to json-file\n      if (e.message.startsWith('Error parsing JSON file')) {\n        logError(\n          projectRoot,\n          'expo',\n          `Error parsing JSON file: ${e.cause.toString()}`\n        );\n        return { exp: null, pkg: null };\n      }\n    }\n\n    // pkg missing\n  }\n\n  // Easiest bail-out: package.json is missing\n  if (!pkg) {\n    logError(projectRoot, 'expo', `Error: Can't find package.json`);\n    return { exp: null, pkg: null };\n  }\n\n  // Grab our exp config from package.json (legacy) or exp.json\n  if (!exp && pkg.exp) {\n    exp = pkg.exp;\n    logError(\n      projectRoot,\n      'expo',\n      `Error: Move your \"exp\" config from package.json to exp.json.`\n    );\n  } else if (!exp && !pkg.exp) {\n    logError(\n      projectRoot,\n      'expo',\n      `Error: Missing ${configName}. See https://docs.expo.io/`\n    );\n    return { exp: null, pkg: null };\n  }\n\n  // fill any required fields we might care about\n\n  // TODO(adam) decide if there are other fields we want to provide defaults for\n\n  if (exp && !exp.name) {\n    exp.name = pkg.name;\n  }\n\n  if (exp && !exp.slug) {\n    exp.slug = slug(exp.name.toLowerCase());\n  }\n\n  if (exp && !exp.version) {\n    exp.version = pkg.version;\n  }\n\n  return { exp, pkg };\n}\n"],"sourceRoot":"/xdl/src"}