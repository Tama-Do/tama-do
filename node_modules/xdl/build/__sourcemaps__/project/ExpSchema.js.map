{"version":3,"sources":["project/ExpSchema.js"],"names":["async","sdkVersion","let","json","await","_getSchemaJSONAsync","schema","getSchemaAsync","assetSchemas","visit","node","fieldPath","meta","asset","push","properties","Object","keys","forEach","property","length","getAssetSchemasAsync","_xdlSchemaJson","Api","xdlSchemaAsync","e","code","ErrorCode","INVALID_JSON","Error"],"mappings":";;;;;;;;+BASOA,WAA8BC,UAA9BD,EAAkD;AACvDE,QAAIC,OAAOC,MAAMC,oBAAoBJ,UAApBI,CAAjBH;AACA,WAAOC,KAAKG,MAAZ;AACF,G;;kBAHsBC,c;;;;;AAKtB;AACA;;;;gCACOP,WAAoCC,UAApCD,EAAwD;AAC7D,UAAMM,SAASF,MAAMG,eAAeN,UAAfM,CAArB;AACA,UAAMC,eAAe,EAArB;AACA,UAAMC,QAAQ,UAACC,IAAD,EAAOC,SAAP,EAAqB;AACjC,UAAID,KAAKE,IAALF,IAAaA,KAAKE,IAALF,CAAUG,KAA3B,EAAkC;AAChCL,qBAAaM,IAAbN,CAAkB,EAAEF,QAAQI,IAAV,EAAgBC,SAAhB,EAAlBH;AACF;AACA,YAAMO,aAAaL,KAAKK,UAAxB;AACA,UAAIA,UAAJ,EAAgB;AACdC,eAAOC,IAAPD,CAAYD,UAAZC,EAAwBE,OAAxBF,CAAgCG;AAAAA,iBAC9BV,MACEM,WAAWI,QAAXJ,CADFN,EAEG,GAAEE,SAAU,GAAEA,UAAUS,MAAVT,GAAmB,CAAnBA,GAAuB,GAAvBA,GAA6B,EAAG,GAAEQ,QAAS,EAF5DV,CAD8BU;AAAAA,SAAhCH;AAMF;AACD,KAbD;AAcAP,UAAMH,MAANG,EAAc,EAAdA;AACA,WAAOD,YAAP;AACF,G;;kBAnBsBa,oB;;;;;;gCAqBtBrB,WAAmCC,UAAnCD,EAA+C;AAC7C,QAAI,CAACsB,eAAerB,UAAfqB,CAAL,EAAiC;AAC/B,UAAI;AACFA,uBAAerB,UAAfqB,IAA6BlB,MAAMmB,8BAAIC,cAAJD,CAAmBtB,UAAnBsB,CAAnCD;AACF,OAFA,CAEE,OAAOG,CAAP,EAAU;AACV,YAAIA,EAAEC,IAAFD,IAAUA,EAAEC,IAAFD,KAAWE,0CAAUC,YAAnC,EAAiD;AAC/C,gBAAM,IAAIC,KAAJ,CAAW,kCAAX,CAAN;AACF,SAFA,MAEO;AACL,gBAAMJ,CAAN;AACF;AACF;AACF;;AAEA,WAAOH,eAAerB,UAAfqB,CAAP;AACF,G;;kBAdejB,mB;;;;;;;AAjCf;AAAA;AAAA;;;;AACA;AAAA;AAAA;;;;;;AAEAH,IAAIoB,iBAAiB,EAArBpB","file":"../../project/ExpSchema.js","sourcesContent":["/**\n * @flow\n */\n\nimport Api from '../Api';\nimport ErrorCode from '../ErrorCode';\n\nlet _xdlSchemaJson = {};\n\nexport async function getSchemaAsync(sdkVersion: string) {\n  let json = await _getSchemaJSONAsync(sdkVersion);\n  return json.schema;\n}\n\n// Array of schema nodes that refer to assets along with their field\n// path (eg. 'notification.icon')\nexport async function getAssetSchemasAsync(sdkVersion: string) {\n  const schema = await getSchemaAsync(sdkVersion);\n  const assetSchemas = [];\n  const visit = (node, fieldPath) => {\n    if (node.meta && node.meta.asset) {\n      assetSchemas.push({ schema: node, fieldPath });\n    }\n    const properties = node.properties;\n    if (properties) {\n      Object.keys(properties).forEach(property =>\n        visit(\n          properties[property],\n          `${fieldPath}${fieldPath.length > 0 ? '.' : ''}${property}`\n        )\n      );\n    }\n  };\n  visit(schema, '');\n  return assetSchemas;\n}\n\nasync function _getSchemaJSONAsync(sdkVersion) {\n  if (!_xdlSchemaJson[sdkVersion]) {\n    try {\n      _xdlSchemaJson[sdkVersion] = await Api.xdlSchemaAsync(sdkVersion);\n    } catch (e) {\n      if (e.code && e.code === ErrorCode.INVALID_JSON) {\n        throw new Error(`Couldn't read schema from server`);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  return _xdlSchemaJson[sdkVersion];\n}\n"],"sourceRoot":"/xdl/src"}