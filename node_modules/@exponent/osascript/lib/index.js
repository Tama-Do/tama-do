'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var osascriptExecAsync = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(script, opts) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _execAsync2.default)('osascript', osascriptArgs(script), Object.assign({ stdio: 'inherit' }, opts));

          case 2:
            return _context.abrupt('return', _context.sent);

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function osascriptExecAsync(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var osascriptSpawnAsync = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(script, opts) {
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _spawnAsync2.default)('osascript', osascriptArgs(script), opts);

          case 2:
            return _context2.abrupt('return', _context2.sent);

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function osascriptSpawnAsync(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var isAppRunningAsync = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(appName) {
    var zeroMeansNo;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return osascriptExecAsync('tell app "System Events" to count processes whose name is ' + JSON.stringify(appName));

          case 2:
            zeroMeansNo = _context3.sent.trim();
            return _context3.abrupt('return', zeroMeansNo !== '0');

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function isAppRunningAsync(_x5) {
    return _ref3.apply(this, arguments);
  };
}();

var safeIdOfAppAsync = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(appName) {
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.prev = 0;
            _context4.next = 3;
            return osascriptExecAsync('id of app ' + JSON.stringify(appName));

          case 3:
            return _context4.abrupt('return', _context4.sent.trim());

          case 6:
            _context4.prev = 6;
            _context4.t0 = _context4['catch'](0);
            return _context4.abrupt('return', null);

          case 9:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this, [[0, 6]]);
  }));

  return function safeIdOfAppAsync(_x6) {
    return _ref4.apply(this, arguments);
  };
}();

var openFinderToFolderAsync = function () {
  var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(dir) {
    var activate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return osascriptSpawnAsync(['tell application "Finder"', 'open POSIX file ' + JSON.stringify(dir), activate && 'activate' || '', 'end tell']);

          case 2:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this);
  }));

  return function openFinderToFolderAsync(_x7, _x8) {
    return _ref5.apply(this, arguments);
  };
}();

var activateApp = function () {
  var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(appName) {
    return _regenerator2.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return osascriptSpawnAsync('tell app ' + JSON.stringify(appName) + ' to activate');

          case 2:
            return _context6.abrupt('return', _context6.sent);

          case 3:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function activateApp(_x10) {
    return _ref6.apply(this, arguments);
  };
}();

var openInAppAsync = function () {
  var _ref7 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7(appName, pth) {
    var cmd;
    return _regenerator2.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            cmd = 'tell app ' + JSON.stringify(appName) + ' to open ' + JSON.stringify(_path2.default.resolve(pth));
            // console.log("cmd=", cmd);

            _context7.next = 3;
            return osascriptSpawnAsync(cmd);

          case 3:
            return _context7.abrupt('return', _context7.sent);

          case 4:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this);
  }));

  return function openInAppAsync(_x11, _x12) {
    return _ref7.apply(this, arguments);
  };
}();

var chooseAppAsync = function () {
  var _ref8 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8(listOfAppNames) {
    var runningAwaitables, appIdAwaitables, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, appName, running, appIds, i;

    return _regenerator2.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            runningAwaitables = [];
            appIdAwaitables = [];
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context8.prev = 5;

            for (_iterator2 = listOfAppNames[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              appName = _step2.value;

              runningAwaitables.push(isAppRunningAsync(appName));
              appIdAwaitables.push(safeIdOfAppAsync(appName));
            }
            _context8.next = 13;
            break;

          case 9:
            _context8.prev = 9;
            _context8.t0 = _context8['catch'](5);
            _didIteratorError2 = true;
            _iteratorError2 = _context8.t0;

          case 13:
            _context8.prev = 13;
            _context8.prev = 14;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 16:
            _context8.prev = 16;

            if (!_didIteratorError2) {
              _context8.next = 19;
              break;
            }

            throw _iteratorError2;

          case 19:
            return _context8.finish(16);

          case 20:
            return _context8.finish(13);

          case 21:
            _context8.next = 23;
            return Promise.all(runningAwaitables);

          case 23:
            running = _context8.sent;
            _context8.next = 26;
            return Promise.all(appIdAwaitables);

          case 26:
            appIds = _context8.sent;
            i = void 0;
            i = 0;

          case 29:
            if (!(i < listOfAppNames.length)) {
              _context8.next = 35;
              break;
            }

            if (!running[i]) {
              _context8.next = 32;
              break;
            }

            return _context8.abrupt('return', listOfAppNames[i]);

          case 32:
            i++;
            _context8.next = 29;
            break;

          case 35:
            i = 0;

          case 36:
            if (!(i < listOfAppNames.length)) {
              _context8.next = 42;
              break;
            }

            if (!appIds[i]) {
              _context8.next = 39;
              break;
            }

            return _context8.abrupt('return', listOfAppNames[i]);

          case 39:
            i++;
            _context8.next = 36;
            break;

          case 42:
            return _context8.abrupt('return', null);

          case 43:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this, [[5, 9, 13, 21], [14,, 16, 20]]);
  }));

  return function chooseAppAsync(_x13) {
    return _ref8.apply(this, arguments);
  };
}();

var chooseEditorAppAsync = function () {
  var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9(preferredEditor) {
    var appId, editorsToTry;
    return _regenerator2.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            if (!preferredEditor) {
              _context9.next = 9;
              break;
            }

            _context9.next = 3;
            return safeIdOfAppAsync(preferredEditor);

          case 3:
            appId = _context9.sent;

            if (!appId) {
              _context9.next = 8;
              break;
            }

            return _context9.abrupt('return', preferredEditor);

          case 8:
            console.warn('Your preferred editor (' + preferredEditor + ') isn\'t installed on this computer.');

          case 9:
            editorsToTry = ['Atom', 'Sublime Text', 'TextMate', 'TextWrangler', 'Visual Studio Code', 'Brackets', 'SubEthaEdit', 'BBEdit', 'Textastic', 'UltraEdit', 'MacVim', 'CodeRunner 2', 'CodeRunner', 'TextEdit'];
            _context9.next = 12;
            return chooseAppAsync(editorsToTry);

          case 12:
            return _context9.abrupt('return', _context9.sent);

          case 13:
          case 'end':
            return _context9.stop();
        }
      }
    }, _callee9, this);
  }));

  return function chooseEditorAppAsync(_x14) {
    return _ref9.apply(this, arguments);
  };
}();

var chooseTerminalAppAsync = function () {
  var _ref10 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10() {
    return _regenerator2.default.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _context10.next = 2;
            return chooseAppAsync(['iTerm 3', 'iTerm 2', 'iTerm', 'HyperTerm',
            // 'Cathode',
            // 'Terminator',
            // 'MacTerm',
            'Terminal']);

          case 2:
            return _context10.abrupt('return', _context10.sent);

          case 3:
          case 'end':
            return _context10.stop();
        }
      }
    }, _callee10, this);
  }));

  return function chooseTerminalAppAsync() {
    return _ref10.apply(this, arguments);
  };
}();

var openInEditorAsync = function () {
  var _ref11 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(pth, preferredEditor) {
    var appName;
    return _regenerator2.default.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            _context11.next = 2;
            return chooseEditorAppAsync(preferredEditor);

          case 2:
            appName = _context11.sent;

            console.log("Will open in " + appName + " -- " + pth);
            _context11.next = 6;
            return openInAppAsync(appName, pth);

          case 6:
            return _context11.abrupt('return', _context11.sent);

          case 7:
          case 'end':
            return _context11.stop();
        }
      }
    }, _callee11, this);
  }));

  return function openInEditorAsync(_x15, _x16) {
    return _ref11.apply(this, arguments);
  };
}();

var openItermToSpecificFolderAsync = function () {
  var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12(dir) {
    return _regenerator2.default.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            _context12.next = 2;
            return osascriptSpawnAsync(['tell application "iTerm"', 'make new terminal', 'tell the first terminal', 'activate current session', 'launch session "Default Session"', 'tell the last session', 'write text "cd ' + _util2.default.inspect(dir) + ' && clear"',
            // 'write text "clear"',
            'end tell', 'end tell', 'end tell']);

          case 2:
            return _context12.abrupt('return', _context12.sent);

          case 3:
          case 'end':
            return _context12.stop();
        }
      }
    }, _callee12, this);
  }));

  return function openItermToSpecificFolderAsync(_x17) {
    return _ref12.apply(this, arguments);
  };
}();

var openTerminalToSpecificFolderAsync = function () {
  var _ref13 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee13(dir) {
    var inTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return _regenerator2.default.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            if (!inTab) {
              _context13.next = 6;
              break;
            }

            _context13.next = 3;
            return osascriptSpawnAsync(['tell application "terminal"', 'tell application "System Events" to tell process "terminal" to keystroke "t" using command down', 'do script with command "cd ' + _util2.default.inspect(dir) + ' && clear" in selected tab of the front window', 'end tell']);

          case 3:
            return _context13.abrupt('return', _context13.sent);

          case 6:
            _context13.next = 8;
            return osascriptSpawnAsync(['tell application "terminal"', 'do script "cd ' + _util2.default.inspect(dir) + ' && clear"', 'end tell', 'tell application "terminal" to activate']);

          case 8:
            return _context13.abrupt('return', _context13.sent);

          case 9:
          case 'end':
            return _context13.stop();
        }
      }
    }, _callee13, this);
  }));

  return function openTerminalToSpecificFolderAsync(_x18, _x19) {
    return _ref13.apply(this, arguments);
  };
}();

var openFolderInTerminalAppAsync = function () {
  var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee14(dir) {
    var inTab = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var program;
    return _regenerator2.default.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            _context14.next = 2;
            return chooseTerminalAppAsync();

          case 2:
            program = _context14.sent;
            _context14.t0 = program;
            _context14.next = _context14.t0 === 'iTerm' ? 6 : _context14.t0 === 'Terminal' ? 10 : 10;
            break;

          case 6:
            _context14.next = 8;
            return openItermToSpecificFolderAsync(dir, inTab);

          case 8:
            return _context14.abrupt('return', _context14.sent);

          case 10:
            _context14.next = 12;
            return openTerminalToSpecificFolderAsync(dir, inTab);

          case 12:
            return _context14.abrupt('return', _context14.sent);

          case 14:
          case 'end':
            return _context14.stop();
        }
      }
    }, _callee14, this);
  }));

  return function openFolderInTerminalAppAsync(_x21, _x22) {
    return _ref14.apply(this, arguments);
  };
}();

var _execAsync = require('exec-async');

var _execAsync2 = _interopRequireDefault(_execAsync);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _spawnAsync = require('@exponent/spawn-async');

var _spawnAsync2 = _interopRequireDefault(_spawnAsync);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Utilities for working with `osascript` which runs AppleScript on Macs
 *
 */

function osascriptArgs(script) {
  if (!_util2.default.isArray(script)) {
    script = [script];
  }

  var args = [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = script[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var line = _step.value;

      args.push('-e');
      args.push(line);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return args;
}

module.exports = {
  activateApp: activateApp,
  chooseAppAsync: chooseAppAsync,
  chooseEditorAppAsync: chooseEditorAppAsync,
  chooseTerminalAppAsync: chooseTerminalAppAsync,
  execAsync: osascriptExecAsync,
  isAppRunningAsync: isAppRunningAsync,
  openFinderToFolderAsync: openFinderToFolderAsync,
  openFolderInTerminalAppAsync: openFolderInTerminalAppAsync,
  openInAppAsync: openInAppAsync,
  openInEditorAsync: openInEditorAsync,
  openItermToSpecificFolderAsync: openItermToSpecificFolderAsync,
  openTerminalToSpecificFolderAsync: openTerminalToSpecificFolderAsync,
  safeIdOfAppAsync: safeIdOfAppAsync,
  spawnAsync: osascriptSpawnAsync

};
//# sourceMappingURL=index.js.map