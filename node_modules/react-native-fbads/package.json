{
  "_args": [
    [
      {
        "raw": "react-native-fbads@https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
        "scope": null,
        "escapedName": "react-native-fbads",
        "name": "react-native-fbads",
        "rawSpec": "https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
        "spec": "https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
        "type": "remote"
      },
      "/Users/katie/tama-do/node_modules/expo"
    ]
  ],
  "_from": "https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
  "_id": "react-native-fbads@4.1.0",
  "_inCache": true,
  "_location": "/react-native-fbads",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-fbads@https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
    "scope": null,
    "escapedName": "react-native-fbads",
    "name": "react-native-fbads",
    "rawSpec": "https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
    "spec": "https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
    "type": "remote"
  },
  "_requiredBy": [
    "/expo"
  ],
  "_resolved": "https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
  "_shasum": "e836ed7f4502593d4a4757f27cdfa0ffef4dc729",
  "_shrinkwrap": null,
  "_spec": "react-native-fbads@https://github.com/callstack-io/react-native-fbads/tarball/v4.1.0",
  "_where": "/Users/katie/tama-do/node_modules/expo",
  "author": {
    "name": "Mike Grabowski",
    "email": "grabbou@gmail.com"
  },
  "dependencies": {
    "eventemitter3": "^2.0.2"
  },
  "description": "Native Facebook Ads for React Native",
  "devDependencies": {
    "babel-eslint": "~7.1.1",
    "eslint": "~3.12.0",
    "eslint-config-airbnb": "~13.0.0",
    "eslint-plugin-import": "~2.2.0",
    "eslint-plugin-jsx-a11y": "~3.0.1",
    "eslint-plugin-react": "~6.8.0",
    "react": "15.4.1",
    "react-native": "^0.40.0"
  },
  "directories": {
    "example": "example"
  },
  "license": "MIT",
  "main": "src/index.js",
  "name": "react-native-fbads",
  "optionalDependencies": {},
  "peerDependencies": {
    "react-native": "*",
    "react": "*"
  },
  "readme": "react-native-fbads [![npm version](https://badge.fury.io/js/react-native-fbads.svg)](https://badge.fury.io/js/react-native-fbads)\n============\n\n[![Facebook Ads](http://i.imgur.com/yH3s6rd.png)](https://developers.facebook.com/products/app-monetization)\n\n**Facebook Audience SDK** integration for React Native, available on iOS and Android. Features native, interstitial and banner ads.\n\n## Table of Contents\n\n- [Installation](#installation)\n  - [Install Javascript packages](#1-install-javascript-packages)\n  - [Configure native projects](#2-configure-native-projects)\n    - [iOS](#21-ios)\n    - [Android](#22-android)\n- [Usage](#usage)\n   - [Interstitial Ads](#interstitial-ads)\n      - [1. Showing ad](#1-showing-ad)\n   - [Native Ads](#native-ads)\n      - [1. Creating AdsManager](#1-creating-adsmanager)\n      - [2. Making ad component](#2-making-ad-component)\n      - [3. Rendering an ad](#3-rendering-an-ad)\n   - [Banner View](#bannerview)\n      - [1. Showing ad](#1-showing-ad-1)\n- [API](#api)\n    - [NativeAdsManager](#nativeadsmanager)\n      - [disableAutoRefresh](#disableautorefresh)\n      - [setMediaCachePolicy](#setmediacachepolicy)\n    - [InterstitialAdManager](#interstitialadmanager)\n      - [showAd](#showad)\n    - [AdSettings](#adsettings)\n      - [currentDeviceHash](#currentdevicehash)\n      - [addTestDevice](#addtestdevice)\n      - [clearTestDevices](#cleartestdevices)\n      - [setLogLevel](#setloglevel)\n      - [setIsChildDirected](#setischilddirected)\n      - [setMediationService](#setmediationservice)\n      - [setUrlPrefix](#seturlprefix)\n- [Running example](#running-example)\n   - [Install dependencies](#1-install-dependencies)\n   - [Start packager](#2-start-packager)\n   - [Run it on iOS / Android](#3-run-it-on-ios--android)\n- [Credits](#credits)\n\n## Installation\n\n### 1. Install Javascript packages\n\nInstall JavaScript packages:\n\n```bash\n$ react-native install react-native-fbads\n```\n\n### 2. Configure native projects\n\nThe react-native-fbads has been automatically linked for you, the next step will be downloading and linking the native Facebook SDK for both platforms.\n\n#### 2.1 iOS\n\nMake sure you have the latest Xcode installed. Open the .xcodeproj in Xcode found in the ios subfolder from your project's root directory. Now, follow all the steps in the [Getting Started Guide for Facebook SDK](https://developers.facebook.com/docs/ios/getting-started) for iOS. Along with FBSDKCoreKit.framework, don't forget to import FBAudienceNetwork.framework.\n\nNext, **follow steps 1 and 3** from the [Getting Started Guide for Facebook Audience](https://developers.facebook.com/docs/audience-network/getting-started). Once you have created the `placement id`, write it down and continue to next section.\n\n#### 2.2. Android\n\nIf you are using [`react-native-fbsdk`](https://github.com/facebook/react-native-fbsdk) you can follow their installation instructions. Otherwise, please follow official [Getting Started Guide for Facebook SDK](https://developers.facebook.com/docs/android/getting-started).\n\n## Usage\n\nFor detailed usage please check `examples` folder.\n\n### Interstitial Ads\n\nInterstitial Ad is a type of an ad that displays full screen with media content. It has a dismiss button as well as the clickable area that takes user outside of your app.\n\n<img src=\"https://cloud.githubusercontent.com/assets/2464966/19014517/3cea1da2-87ef-11e6-9f5a-6f3dbccc18a2.png\" height=\"500\">\n\nThey are displayed over your root view with a single, imperative call.\n\n#### 1. Showing ad\n\nIn order to show an ad, you have to import `InterstitialAdManager` and call `showAd` on it supplying it a placementId identifier, as in the below example:\n\n```js\nimport { InterstitialAdManager } from 'react-native-fbads';\n\nInterstitialAdManager.showAd(placementId)\n  .then(didClick => {})\n  .catch(error => {})\n```\n\nMethod returns a promise that will be rejected when an error occurs during a call (e.g. no fill from ad server or network error) and resolve when user either dimisses or interacts with the displayed ad.\n\n### Native Ads\n\nNative Ad is a type of an ad that matches the form and function of your React Native interface.\n\n<img src=\"https://cloud.githubusercontent.com/assets/2464966/18811079/52c99932-829e-11e6-9a3d-218569d71a6d.png\" height=\"500\" />\n\n#### 1. Creating AdsManager\n\nIn order to start rendering your custom native ads within your app, you have to construct\na `NativeAdManager` that is responsible for caching and fetching ads as you request them.\n\n```js\nimport { NativeAdsManager } from 'react-native-fbads';\n\nconst adsManager = new NativeAdsManager(placementId, numberOfAdsToRequest);\n```\n\nThe constructor accepts two parameters:\n- `placementId` - which is an unique identifier describing your ad units,\n- `numberOfAdsToRequest` - which is a number of ads to request by ads manager at a time\n\n#### 2. Making ad component\n\nAfter creating `adsManager` instance, next step is to wrap an arbitrary component that you want to\nuse for rendering your custom advertises with a `withNativeAd` wrapper.\n\nIt's a higher order component that passes `nativeAd` via props to a wrapped component allowing\nyou to actually render an ad!\n\n```js\nclass AdComponent extends React.Component {\n  render() {\n    return (\n      <View>\n        <Text>{this.props.nativeAd.description}</Text>\n      </View>\n    );\n  }\n}\n\nexport default withNativeAd(AdComponent);\n```\n\nFor full details on the `nativeAd` object, please check flowtype definitions [here](https://github.com/callstack-io/react-native-fbads/blob/master/src/types.js)\n\n#### 3. Rendering an ad\n\nFinally, you can render your wrapped component from previous step and pass it `adsManager`\nof your choice.\n\n```js\nclass MainApp extends React.Component {\n  render() {\n    return (\n      <View>\n        <AdComponent adsManager={adsManager} />\n      </View>\n    );\n  }\n}\n```\n\n### BannerView\n\nBannerView is a component that allows you to display native banners (know as *AdView*). \n\nBanners are available in 3 sizes:\n- `standard` (BANNER_HEIGHT_50)\n- `large` (BANNER_HEIGHT_90)\n- `rectangle` (RECTANGLE_HEIGHT_250)\n\n#### 1. Showing ad\n\nIn order to show an ad, you have to first import it `BannerView` from the package:\n\n```js\nimport { BannerView } from 'react-native-fbads';\n```\n\nLater in your app, you can render it like below:\n\n```js\nfunction ViewWithBanner(props) {\n  return (\n    <View>\n      <BannerView\n        placementId=\"YOUR_BANNER_PLACEMENT_ID\"\n        type=\"standard\"\n        onClick={() => console.log('click')}\n        onError={(err) => console.log('error', err)}\n      />\n    </View>\n  );\n}\n```\n\n## API\n\n### NativeAdsManager\n\nProvides a mechanism to fetch a set of ads and then use them within your application. The native ads manager supports giving out as many ads as needed by cloning over the set of ads it got back from the server which can be useful for feed scenarios. It's a wrapper for [`FBNativeAdsManager`](https://developers.facebook.com/docs/reference/ios/current/class/FBNativeAdsManager/)\n\n#### disableAutoRefresh\n\nBy default the native ads manager will refresh its ads periodically. This does not mean that any ads which are shown in the application's UI will be refreshed but simply that requesting next native ads to render may return new ads at different times. This method disables that functionality.\n\n```js\nadsManager.disableAutoRefresh();\n```\n\n#### setMediaCachePolicy\n\nSets the native ads manager caching policy. This controls which media from the native ads are cached before being displayed. The default is to not block on caching.\n\n```js\nadsManager.setMediaCachePolicy('none' | 'icon' | 'image' | 'all');\n```\n\n**Note:** This method is a noop on Android\n\n### InterstitialAdManager\n\n```js\nimport { InterstitialAdManager } from 'react-native-fbads';\n```\n\nInterstitialAdManager is a manager that allows you to display interstitial ads within your app with a single call.\n\n#### showAd\n\nLoads an interstitial ad asynchronously and shows it full screen by attaching a view onto the current root view\ncontroller.\n\n```js\nInterstitialAdManager.showAd('placementId')\n  .then(...)\n  .catch(...);\n```\n\nPromise will be rejected when there's an error loading ads from Facebook Audience network. It will resolve with a\n`boolean` indicating whether user didClick an ad or not.\n\nOn Android you have to add following activity to *AndroidManifest.xml*\n```xml\n<activity\n  android:name=\"com.facebook.ads.InterstitialAdActivity\"\n  android:configChanges=\"keyboardHidden|orientation\" />\n```\n\n**Note:** There can be only one `showAd` call being performed at a time. Otherwise, an error will be thrown.\n\n### AdSettings\n\n```js\nimport { AdSettings } from 'react-native-fbads';\n```\n\nAdSettings contains global settings for all ad controls.\n\n#### currentDeviceHash\n\nConstant which contains current device's hash id.\n\n#### addTestDevice\n\nRegisters given device to receive test ads. When you run app on simulator, it should automatically get added. Use it\nto receive test ads in development mode on a standalone phone. Hash of the current device can be obtained from a\ndebug log or `AdSettings.currentDeviceHash` constant.\n\nAll devices should be specified before any other action takes place, like [`AdsManager`](#nativeadsmanager) gets created.\n\n```js\nAdSettings.addTestDevice('hash');\n```\n\n#### clearTestDevices\n\nClears all previously set test devices. If you want your ads to respect newly set config, you'll have to destroy and create\nan instance of AdsManager once again.\n\n```js\nAdSettings.clearTestDevices();\n```\n\n#### setLogLevel\n\nSets current SDK log level.\n\n```js\nAdSettings.setLogLevel('none' | 'debug' | 'verbose' | 'warning' | 'error' | 'notification');\n```\n\n**Note:** This method is a noop on Android.\n\n#### setIsChildDirected\n\nConfigures the ad control for treatment as child-directed.\n\n```js\nAdSettings.setIsChildDirected(true | false);\n```\n\n#### setMediationService\n\nIf an ad provided service is mediating Audience Network in their sdk, it is required to set the name of the mediation service\n\n```js\nAdSettings.setMediationService('foobar');\n```\n\n#### setUrlPrefix\n\nSets the url prefix to use when making ad requests.\n\n```js\nAdSettings.setUrlPrefix('...');\n```\n\n**Note:** This method should never be used in production\n\n## Running example\n\nIn order to see ads you will have to create your own `placementId` and use it instead of the one provided in the examples. This is our internal set up that doesn't work for any developers outside of Callstack.io organisation. This is because of Facebook not showing test ads to outside collaborators in the development mode.\n\n### 1. Install dependencies\n\n```bash\n$ npm install\n```\n\n### 2. Start packager\n\nBecause of the way example project is set up (custom packager arguments), you'll\nhave to start it explicitly before any other command\n\n```bash\n$ cd ./example && npm start\n```\n\n### 3. Run it on iOS / Android\n\n```bash\n$ cd ./examples && npm run ios\n$ cd ./examples && npm run android\n```\n\n### Credits\n\nSome of the API explanations were borrowed from Facebook SDK documentation.\n",
  "readmeFilename": "Readme.md",
  "scripts": {
    "test": "flow ./src"
  },
  "version": "4.1.0"
}
